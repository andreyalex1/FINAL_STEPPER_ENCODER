
FINAL_STEPPER_ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080069b0  080069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c8  080069c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069d0  080069d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080069d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000078  08006a50  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  200002e4  08006a50  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000032  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001343f  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002290  00000000  00000000  000334e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00035780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000367c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226e2  00000000  00000000  00037750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001306b  00000000  00000000  00059e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4da2  00000000  00000000  0006ce9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141c3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000493c  00000000  00000000  00141c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006998 	.word	0x08006998

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	08006998 	.word	0x08006998

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96e 	b.w	8000ec4 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468c      	mov	ip, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8083 	bne.w	8000d16 <__udivmoddi4+0x116>
 8000c10:	428a      	cmp	r2, r1
 8000c12:	4617      	mov	r7, r2
 8000c14:	d947      	bls.n	8000ca6 <__udivmoddi4+0xa6>
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	b142      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1c:	f1c2 0020 	rsb	r0, r2, #32
 8000c20:	fa24 f000 	lsr.w	r0, r4, r0
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4097      	lsls	r7, r2
 8000c28:	ea40 0c01 	orr.w	ip, r0, r1
 8000c2c:	4094      	lsls	r4, r2
 8000c2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fbbc f6f8 	udiv	r6, ip, r8
 8000c38:	fa1f fe87 	uxth.w	lr, r7
 8000c3c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c44:	fb06 f10e 	mul.w	r1, r6, lr
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x60>
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c52:	f080 8119 	bcs.w	8000e88 <__udivmoddi4+0x288>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 8116 	bls.w	8000e88 <__udivmoddi4+0x288>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	443b      	add	r3, r7
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x8c>
 8000c78:	193c      	adds	r4, r7, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	f080 8105 	bcs.w	8000e8c <__udivmoddi4+0x28c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f240 8102 	bls.w	8000e8c <__udivmoddi4+0x28c>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	443c      	add	r4, r7
 8000c8c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c90:	eba4 040e 	sub.w	r4, r4, lr
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa0>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	b902      	cbnz	r2, 8000caa <__udivmoddi4+0xaa>
 8000ca8:	deff      	udf	#255	; 0xff
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	d150      	bne.n	8000d54 <__udivmoddi4+0x154>
 8000cb2:	1bcb      	subs	r3, r1, r7
 8000cb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb8:	fa1f f887 	uxth.w	r8, r7
 8000cbc:	2601      	movs	r6, #1
 8000cbe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cc2:	0c21      	lsrs	r1, r4, #16
 8000cc4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ccc:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0xe4>
 8000cd4:	1879      	adds	r1, r7, r1
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0xe2>
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	f200 80e9 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1ac9      	subs	r1, r1, r3
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x10c>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x10a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80d9 	bhi.w	8000ebc <__udivmoddi4+0x2bc>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e7bf      	b.n	8000c96 <__udivmoddi4+0x96>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0x12e>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	f000 80b1 	beq.w	8000e82 <__udivmoddi4+0x282>
 8000d20:	2600      	movs	r6, #0
 8000d22:	e9c5 0100 	strd	r0, r1, [r5]
 8000d26:	4630      	mov	r0, r6
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f683 	clz	r6, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d14a      	bne.n	8000dcc <__udivmoddi4+0x1cc>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0x140>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80b8 	bhi.w	8000eb0 <__udivmoddi4+0x2b0>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0103 	sbc.w	r1, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	468c      	mov	ip, r1
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0a8      	beq.n	8000ca0 <__udivmoddi4+0xa0>
 8000d4e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f603 	lsr.w	r6, r0, r3
 8000d5c:	4097      	lsls	r7, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d66:	40d9      	lsrs	r1, r3
 8000d68:	4330      	orrs	r0, r6
 8000d6a:	0c03      	lsrs	r3, r0, #16
 8000d6c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f108 	mul.w	r1, r6, r8
 8000d80:	4299      	cmp	r1, r3
 8000d82:	fa04 f402 	lsl.w	r4, r4, r2
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x19c>
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d8e:	f080 808d 	bcs.w	8000eac <__udivmoddi4+0x2ac>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 808a 	bls.w	8000eac <__udivmoddi4+0x2ac>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	443b      	add	r3, r7
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b281      	uxth	r1, r0
 8000da0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb00 f308 	mul.w	r3, r0, r8
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x1c4>
 8000db4:	1879      	adds	r1, r7, r1
 8000db6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dba:	d273      	bcs.n	8000ea4 <__udivmoddi4+0x2a4>
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d971      	bls.n	8000ea4 <__udivmoddi4+0x2a4>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4439      	add	r1, r7
 8000dc4:	1acb      	subs	r3, r1, r3
 8000dc6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dca:	e778      	b.n	8000cbe <__udivmoddi4+0xbe>
 8000dcc:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd0:	fa03 f406 	lsl.w	r4, r3, r6
 8000dd4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd8:	431c      	orrs	r4, r3
 8000dda:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dde:	fa01 f306 	lsl.w	r3, r1, r6
 8000de2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000de6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dea:	431f      	orrs	r7, r3
 8000dec:	0c3b      	lsrs	r3, r7, #16
 8000dee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df2:	fa1f f884 	uxth.w	r8, r4
 8000df6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dfa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dfe:	fb09 fa08 	mul.w	sl, r9, r8
 8000e02:	458a      	cmp	sl, r1
 8000e04:	fa02 f206 	lsl.w	r2, r2, r6
 8000e08:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x220>
 8000e0e:	1861      	adds	r1, r4, r1
 8000e10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e14:	d248      	bcs.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e16:	458a      	cmp	sl, r1
 8000e18:	d946      	bls.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1e:	4421      	add	r1, r4
 8000e20:	eba1 010a 	sub.w	r1, r1, sl
 8000e24:	b2bf      	uxth	r7, r7
 8000e26:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e2a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e2e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e32:	fb00 f808 	mul.w	r8, r0, r8
 8000e36:	45b8      	cmp	r8, r7
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x24a>
 8000e3a:	19e7      	adds	r7, r4, r7
 8000e3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e40:	d22e      	bcs.n	8000ea0 <__udivmoddi4+0x2a0>
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d92c      	bls.n	8000ea0 <__udivmoddi4+0x2a0>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4427      	add	r7, r4
 8000e4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4e:	eba7 0708 	sub.w	r7, r7, r8
 8000e52:	fba0 8902 	umull	r8, r9, r0, r2
 8000e56:	454f      	cmp	r7, r9
 8000e58:	46c6      	mov	lr, r8
 8000e5a:	4649      	mov	r1, r9
 8000e5c:	d31a      	bcc.n	8000e94 <__udivmoddi4+0x294>
 8000e5e:	d017      	beq.n	8000e90 <__udivmoddi4+0x290>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x27a>
 8000e62:	ebb3 020e 	subs.w	r2, r3, lr
 8000e66:	eb67 0701 	sbc.w	r7, r7, r1
 8000e6a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e6e:	40f2      	lsrs	r2, r6
 8000e70:	ea4c 0202 	orr.w	r2, ip, r2
 8000e74:	40f7      	lsrs	r7, r6
 8000e76:	e9c5 2700 	strd	r2, r7, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	462e      	mov	r6, r5
 8000e84:	4628      	mov	r0, r5
 8000e86:	e70b      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0x60>
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	e6fd      	b.n	8000c8c <__udivmoddi4+0x8c>
 8000e90:	4543      	cmp	r3, r8
 8000e92:	d2e5      	bcs.n	8000e60 <__udivmoddi4+0x260>
 8000e94:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e98:	eb69 0104 	sbc.w	r1, r9, r4
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	e7df      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e7d2      	b.n	8000e4a <__udivmoddi4+0x24a>
 8000ea4:	4660      	mov	r0, ip
 8000ea6:	e78d      	b.n	8000dc4 <__udivmoddi4+0x1c4>
 8000ea8:	4681      	mov	r9, r0
 8000eaa:	e7b9      	b.n	8000e20 <__udivmoddi4+0x220>
 8000eac:	4666      	mov	r6, ip
 8000eae:	e775      	b.n	8000d9c <__udivmoddi4+0x19c>
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e74a      	b.n	8000d4a <__udivmoddi4+0x14a>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	4439      	add	r1, r7
 8000eba:	e713      	b.n	8000ce4 <__udivmoddi4+0xe4>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	443c      	add	r4, r7
 8000ec0:	e724      	b.n	8000d0c <__udivmoddi4+0x10c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f001 f990 	bl	80021f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f842 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f000 fa3e 	bl	8001354 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000ed8:	f000 f8aa 	bl	8001030 <MX_CAN1_Init>
  MX_SPI1_Init();
 8000edc:	f000 f90c 	bl	80010f8 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000ee0:	f000 fa02 	bl	80012e8 <MX_TIM7_Init>
  MX_I2C1_Init();
 8000ee4:	f000 f8da 	bl	800109c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000ee8:	f000 f990 	bl	800120c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000eec:	f000 f93c 	bl	8001168 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // initialize motor
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <main+0x74>)
 8000ef6:	f002 fb59 	bl	80035ac <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f001 f9ea 	bl	80022d4 <HAL_Delay>
    TORQUE_Reg_Set();
 8000f00:	f000 fb34 	bl	800156c <TORQUE_Reg_Set>
    HAL_Delay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f001 f9e5 	bl	80022d4 <HAL_Delay>
    CTRL_Reg_Set();
 8000f0a:	f000 fafb 	bl	8001504 <CTRL_Reg_Set>

    // encoder does not require initialization

    //initialize CAN
    CAN_Header_Config(&TxHeader);		// Sets header values
 8000f0e:	480c      	ldr	r0, [pc, #48]	; (8000f40 <main+0x78>)
 8000f10:	f000 fabd 	bl	800148e <CAN_Header_Config>
    CAN_Filter_Config(&canfilterconfig);// Seds filter values
 8000f14:	480b      	ldr	r0, [pc, #44]	; (8000f44 <main+0x7c>)
 8000f16:	f000 fa91 	bl	800143c <CAN_Filter_Config>
    CAN_Starter(&hcan1, &canfilterconfig); // starts can
 8000f1a:	490a      	ldr	r1, [pc, #40]	; (8000f44 <main+0x7c>)
 8000f1c:	480a      	ldr	r0, [pc, #40]	; (8000f48 <main+0x80>)
 8000f1e:	f000 facd 	bl	80014bc <CAN_Starter>

    // enable user timer interrupt
    configure_tim7();
 8000f22:	f000 fb79 	bl	8001618 <configure_tim7>
    HAL_TIM_Base_Start_IT(&htim7);
 8000f26:	4809      	ldr	r0, [pc, #36]	; (8000f4c <main+0x84>)
 8000f28:	f004 fb8c 	bl	8005644 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim2);
 8000f2c:	4808      	ldr	r0, [pc, #32]	; (8000f50 <main+0x88>)
 8000f2e:	f004 fb89 	bl	8005644 <HAL_TIM_Base_Start_IT>
    //start motor PWM
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f32:	2100      	movs	r1, #0
 8000f34:	4807      	ldr	r0, [pc, #28]	; (8000f54 <main+0x8c>)
 8000f36:	f004 fc9d 	bl	8005874 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <main+0x72>
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	20000264 	.word	0x20000264
 8000f44:	2000015c 	.word	0x2000015c
 8000f48:	2000023c 	.word	0x2000023c
 8000f4c:	20000298 	.word	0x20000298
 8000f50:	200001f4 	.word	0x200001f4
 8000f54:	2000010c 	.word	0x2000010c

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	; 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2234      	movs	r2, #52	; 0x34
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f005 fc26 	bl	80067b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <SystemClock_Config+0xd0>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	4a28      	ldr	r2, [pc, #160]	; (8001028 <SystemClock_Config+0xd0>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <SystemClock_Config+0xd0>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <SystemClock_Config+0xd4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a22      	ldr	r2, [pc, #136]	; (800102c <SystemClock_Config+0xd4>)
 8000fa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <SystemClock_Config+0xd4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fbc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000fcc:	23a0      	movs	r3, #160	; 0xa0
 8000fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fd4b 	bl	8004a7c <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fec:	f000 fb24 	bl	8001638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001000:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001006:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	2105      	movs	r1, #5
 800100e:	4618      	mov	r0, r3
 8001010:	f003 fa7c 	bl	800450c <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800101a:	f000 fb0d 	bl	8001638 <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	; 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_CAN1_Init+0x64>)
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <MX_CAN1_Init+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_CAN1_Init+0x64>)
 800103c:	2205      	movs	r2, #5
 800103e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_CAN1_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_CAN1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_CAN1_Init+0x64>)
 800104e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001052:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_CAN1_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_CAN1_Init+0x64>)
 800105c:	2200      	movs	r2, #0
 800105e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_CAN1_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_CAN1_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_CAN1_Init+0x64>)
 800106e:	2201      	movs	r2, #1
 8001070:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_CAN1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_CAN1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_CAN1_Init+0x64>)
 8001080:	f001 f94c 	bl	800231c <HAL_CAN_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800108a:	f000 fad5 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000023c 	.word	0x2000023c
 8001098:	40006400 	.word	0x40006400

0800109c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <MX_I2C1_Init+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x58>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_I2C1_Init+0x50>)
 80010da:	f002 fa81 	bl	80035e0 <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 faa8 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200000b8 	.word	0x200000b8
 80010f0:	40005400 	.word	0x40005400
 80010f4:	000186a0 	.word	0x000186a0

080010f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_SPI1_Init+0x68>)
 80010fe:	4a19      	ldr	r2, [pc, #100]	; (8001164 <MX_SPI1_Init+0x6c>)
 8001100:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_SPI1_Init+0x68>)
 8001104:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001108:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_SPI1_Init+0x68>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <MX_SPI1_Init+0x68>)
 8001112:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001116:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_SPI1_Init+0x68>)
 800111a:	2202      	movs	r2, #2
 800111c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_SPI1_Init+0x68>)
 8001120:	2201      	movs	r2, #1
 8001122:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_SPI1_Init+0x68>)
 8001126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_SPI1_Init+0x68>)
 800112e:	2238      	movs	r2, #56	; 0x38
 8001130:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_SPI1_Init+0x68>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_SPI1_Init+0x68>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_SPI1_Init+0x68>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_SPI1_Init+0x68>)
 8001146:	220a      	movs	r2, #10
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_SPI1_Init+0x68>)
 800114c:	f003 ff34 	bl	8004fb8 <HAL_SPI_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001156:	f000 fa6f 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000194 	.word	0x20000194
 8001164:	40013000 	.word	0x40013000

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_TIM2_Init+0xa0>)
 8001188:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_TIM2_Init+0xa0>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_TIM2_Init+0xa0>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_TIM2_Init+0xa0>)
 800119c:	2201      	movs	r2, #1
 800119e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_TIM2_Init+0xa0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_TIM2_Init+0xa0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_TIM2_Init+0xa0>)
 80011ae:	f004 f9f9 	bl	80055a4 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b8:	f000 fa3e 	bl	8001638 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80011bc:	2307      	movs	r3, #7
 80011be:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80011c0:	2360      	movs	r3, #96	; 0x60
 80011c2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_TIM2_Init+0xa0>)
 80011d4:	f004 fe3c 	bl	8005e50 <HAL_TIM_SlaveConfigSynchro>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011de:	f000 fa2b 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_TIM2_Init+0xa0>)
 80011f0:	f005 fa28 	bl	8006644 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011fa:	f000 fa1d 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001f4 	.word	0x200001f4

0800120c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <MX_TIM3_Init+0xd4>)
 8001230:	4a2c      	ldr	r2, [pc, #176]	; (80012e4 <MX_TIM3_Init+0xd8>)
 8001232:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <MX_TIM3_Init+0xd4>)
 8001236:	2218      	movs	r2, #24
 8001238:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MX_TIM3_Init+0xd4>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <MX_TIM3_Init+0xd4>)
 8001242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001246:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <MX_TIM3_Init+0xd4>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <MX_TIM3_Init+0xd4>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001254:	4822      	ldr	r0, [pc, #136]	; (80012e0 <MX_TIM3_Init+0xd4>)
 8001256:	f004 fabe 	bl	80057d6 <HAL_TIM_PWM_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001260:	f000 f9ea 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001264:	481e      	ldr	r0, [pc, #120]	; (80012e0 <MX_TIM3_Init+0xd4>)
 8001266:	f004 fa5d 	bl	8005724 <HAL_TIM_OC_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001270:	f000 f9e2 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001274:	2350      	movs	r3, #80	; 0x50
 8001276:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800127c:	f107 0320 	add.w	r3, r7, #32
 8001280:	4619      	mov	r1, r3
 8001282:	4817      	ldr	r0, [pc, #92]	; (80012e0 <MX_TIM3_Init+0xd4>)
 8001284:	f005 f9de 	bl	8006644 <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800128e:	f000 f9d3 	bl	8001638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001292:	2360      	movs	r3, #96	; 0x60
 8001294:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2200      	movs	r2, #0
 80012a6:	4619      	mov	r1, r3
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_TIM3_Init+0xd4>)
 80012aa:	f004 fd0f 	bl	8005ccc <HAL_TIM_PWM_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80012b4:	f000 f9c0 	bl	8001638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80012b8:	2310      	movs	r3, #16
 80012ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2204      	movs	r2, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <MX_TIM3_Init+0xd4>)
 80012c4:	f004 fca6 	bl	8005c14 <HAL_TIM_OC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80012ce:	f000 f9b3 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012d2:	4803      	ldr	r0, [pc, #12]	; (80012e0 <MX_TIM3_Init+0xd4>)
 80012d4:	f000 fb4c 	bl	8001970 <HAL_TIM_MspPostInit>

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000010c 	.word	0x2000010c
 80012e4:	40000400 	.word	0x40000400

080012e8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_TIM7_Init+0x64>)
 80012f8:	4a15      	ldr	r2, [pc, #84]	; (8001350 <MX_TIM7_Init+0x68>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 249;
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_TIM7_Init+0x64>)
 80012fe:	22f9      	movs	r2, #249	; 0xf9
 8001300:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_TIM7_Init+0x64>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 15999;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_TIM7_Init+0x64>)
 800130a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800130e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_TIM7_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_TIM7_Init+0x64>)
 8001318:	f004 f944 	bl	80055a4 <HAL_TIM_Base_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001322:	f000 f989 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_TIM7_Init+0x64>)
 8001334:	f005 f986 	bl	8006644 <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800133e:	f000 f97b 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000298 	.word	0x20000298
 8001350:	40001400 	.word	0x40001400

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <MX_GPIO_Init+0xdc>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <MX_GPIO_Init+0xdc>)
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <MX_GPIO_Init+0xdc>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <MX_GPIO_Init+0xdc>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <MX_GPIO_Init+0xdc>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_GPIO_Init+0xdc>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <MX_GPIO_Init+0xdc>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <MX_GPIO_Init+0xdc>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_GPIO_Init+0xdc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_GPIO_Init+0xdc>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <MX_GPIO_Init+0xdc>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_GPIO_Init+0xdc>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2182      	movs	r1, #130	; 0x82
 80013de:	4815      	ldr	r0, [pc, #84]	; (8001434 <MX_GPIO_Init+0xe0>)
 80013e0:	f002 f8e4 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2110      	movs	r1, #16
 80013e8:	4813      	ldr	r0, [pc, #76]	; (8001438 <MX_GPIO_Init+0xe4>)
 80013ea:	f002 f8df 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80013ee:	2382      	movs	r3, #130	; 0x82
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <MX_GPIO_Init+0xe0>)
 8001406:	f001 ff3d 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800140a:	2310      	movs	r3, #16
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_GPIO_Init+0xe4>)
 8001422:	f001 ff2f 	bl	8003284 <HAL_GPIO_Init>

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40020800 	.word	0x40020800
 8001438:	40020000 	.word	0x40020000

0800143c <CAN_Filter_Config>:

/* USER CODE BEGIN 4 */


int CAN_Filter_Config(CAN_FilterTypeDef* canfilterconfig){
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	canfilterconfig->FilterActivation = CAN_FILTER_ENABLE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	621a      	str	r2, [r3, #32]
	canfilterconfig->FilterBank = 0;  // which filter bank to use from the assigned ones
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
	canfilterconfig->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
	canfilterconfig->FilterMode = CAN_FILTERMODE_IDMASK;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
	canfilterconfig->FilterScale = CAN_FILTERSCALE_32BIT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	61da      	str	r2, [r3, #28]
	canfilterconfig->FilterIdHigh = 0x0000;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
	canfilterconfig->FilterIdLow = 0x0000;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
	canfilterconfig->FilterMaskIdHigh = 0x0000;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
	canfilterconfig->FilterMaskIdLow = 0x0000;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
	canfilterconfig->SlaveStartFilterBank = 20;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2214      	movs	r2, #20
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 8001480:	2301      	movs	r3, #1
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <CAN_Header_Config>:

int CAN_Header_Config(CAN_TxHeaderTypeDef* TxHeader){
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	TxHeader->IDE = CAN_ID_STD;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
	TxHeader->StdId = MY_CAN_ID;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	220f      	movs	r2, #15
 80014a0:	601a      	str	r2, [r3, #0]
	TxHeader->RTR = CAN_RTR_DATA;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
	TxHeader->DLC = 8;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2208      	movs	r2, #8
 80014ac:	611a      	str	r2, [r3, #16]
	return 1;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <CAN_Starter>:

int CAN_Starter(CAN_HandleTypeDef* hcan,CAN_FilterTypeDef* canfilterconfig){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_ConfigFilter(hcan, canfilterconfig) != HAL_OK){		// attempting to register can filter
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f001 f823 	bl	8002514 <HAL_CAN_ConfigFilter>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <CAN_Starter+0x1c>
			Error_Handler();
 80014d4:	f000 f8b0 	bl	8001638 <Error_Handler>
		}
		if (HAL_CAN_Start(hcan) != HAL_OK){		// attempting to start CAN
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f001 f8fb 	bl	80026d4 <HAL_CAN_Start>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <CAN_Starter+0x2c>
			Error_Handler();
 80014e4:	f000 f8a8 	bl	8001638 <Error_Handler>
		}
		if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){	// attempting to enable CAN interrupts.
 80014e8:	2102      	movs	r1, #2
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f001 fb58 	bl	8002ba0 <HAL_CAN_ActivateNotification>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <CAN_Starter+0x3e>
			Error_Handler();								// CAN1_RX0_IRQHandler() is called when an interrupt is triggered
 80014f6:	f000 f89f 	bl	8001638 <Error_Handler>
		}
	return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <CTRL_Reg_Set>:

void CTRL_Reg_Set(){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	uint16_t TX = 0x0000;
 800150a:	2300      	movs	r3, #0
 800150c:	80fb      	strh	r3, [r7, #6]
	TX += (0x03 << 10); // 850 ns dead time
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001514:	80fb      	strh	r3, [r7, #6]
	TX += (0x03 << 8); // Gain of 40
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800151c:	80fb      	strh	r3, [r7, #6]
	TX += (((int)sqrt(stepper_step_denominator)) << 3); // 1/4 step
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <CTRL_Reg_Set+0x64>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe ffc2 	bl	80004ac <__aeabi_i2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	ec43 2b10 	vmov	d0, r2, r3
 8001530:	f005 f94a 	bl	80067c8 <sqrt>
 8001534:	ec53 2b10 	vmov	r2, r3, d0
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fad0 	bl	8000ae0 <__aeabi_d2iz>
 8001540:	4603      	mov	r3, r0
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	b29a      	uxth	r2, r3
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	4413      	add	r3, r2
 800154a:	80fb      	strh	r3, [r7, #6]
	TX += 0x01 ; // Enable motor
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	3301      	adds	r3, #1
 8001550:	80fb      	strh	r3, [r7, #6]
	RegAccess(WRITE, 0x00, TX); // write CTRL Register (Address = 0x00)
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	461a      	mov	r2, r3
 8001556:	2100      	movs	r1, #0
 8001558:	2000      	movs	r0, #0
 800155a:	f000 f81d 	bl	8001598 <RegAccess>
	return;
 800155e:	bf00      	nop
}
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000

0800156c <TORQUE_Reg_Set>:

void TORQUE_Reg_Set(){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	uint16_t TX = 0x0000;
 8001572:	2300      	movs	r3, #0
 8001574:	80fb      	strh	r3, [r7, #6]
	TX += (0x01 << 8); // sample time = 100 us
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800157c:	80fb      	strh	r3, [r7, #6]
	TX += 0x01; // Torque = 0x3F
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	3301      	adds	r3, #1
 8001582:	80fb      	strh	r3, [r7, #6]
//	TX = 0b0001000100000001;
	RegAccess(WRITE, 0x01, TX); // write TORQUE Register (Address = 0x01)
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	461a      	mov	r2, r3
 8001588:	2101      	movs	r1, #1
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f804 	bl	8001598 <RegAccess>
	return;
 8001590:	bf00      	nop
}
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <RegAccess>:
}



uint16_t RegAccess(uint8_t operation, uint8_t address, uint16_t value)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af02      	add	r7, sp, #8
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	460b      	mov	r3, r1
 80015a4:	71bb      	strb	r3, [r7, #6]
 80015a6:	4613      	mov	r3, r2
 80015a8:	80bb      	strh	r3, [r7, #4]
  uint16_t parcel = value;
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	81fb      	strh	r3, [r7, #14]

  parcel += (address << 12); // register address
 80015ae:	79bb      	ldrb	r3, [r7, #6]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	031b      	lsls	r3, r3, #12
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	4413      	add	r3, r2
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	81fb      	strh	r3, [r7, #14]
  parcel += (operation << 15); // read-write operation choice
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	03db      	lsls	r3, r3, #15
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	4413      	add	r3, r2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	81fb      	strh	r3, [r7, #14]

  uint16_t received = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	81bb      	strh	r3, [r7, #12]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2110      	movs	r1, #16
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <RegAccess+0x78>)
 80015d8:	f001 ffe8 	bl	80035ac <HAL_GPIO_WritePin>
 // HAL_Delay(1);
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&parcel, (uint8_t*)&received, 1, 1000);
 80015dc:	f107 020c 	add.w	r2, r7, #12
 80015e0:	f107 010e 	add.w	r1, r7, #14
 80015e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2301      	movs	r3, #1
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <RegAccess+0x7c>)
 80015ee:	f003 fd6c 	bl	80050ca <HAL_SPI_TransmitReceive>
 // HAL_Delay(1);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2110      	movs	r1, #16
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <RegAccess+0x78>)
 80015f8:	f001 ffd8 	bl	80035ac <HAL_GPIO_WritePin>
 // HAL_Delay(1);
  received &= ~0xF000; // clear upper 4 bits, leave lower 12 bits
 80015fc:	89bb      	ldrh	r3, [r7, #12]
 80015fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001602:	b29b      	uxth	r3, r3
 8001604:	81bb      	strh	r3, [r7, #12]

  return received;
 8001606:	89bb      	ldrh	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020000 	.word	0x40020000
 8001614:	20000194 	.word	0x20000194

08001618 <configure_tim7>:

void configure_tim7(){
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	TIM7->PSC = USER_TIMER_PRESCALER;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <configure_tim7+0x1c>)
 800161e:	2231      	movs	r2, #49	; 0x31
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
	TIM7->ARR = USER_TIMER_PERIOD;
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <configure_tim7+0x1c>)
 8001624:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
	return;
 800162a:	bf00      	nop
}
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40001400 	.word	0x40001400

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	e7fe      	b.n	8001640 <Error_Handler+0x8>
	...

08001644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_MspInit+0x4c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <HAL_MspInit+0x4c>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_MspInit+0x4c>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800

08001694 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_CAN_MspInit+0x94>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d134      	bne.n	8001720 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <HAL_CAN_MspInit+0x98>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a1b      	ldr	r2, [pc, #108]	; (800172c <HAL_CAN_MspInit+0x98>)
 80016c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_CAN_MspInit+0x98>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_CAN_MspInit+0x98>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_CAN_MspInit+0x98>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_CAN_MspInit+0x98>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001700:	2309      	movs	r3, #9
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <HAL_CAN_MspInit+0x9c>)
 800170c:	f001 fdba 	bl	8003284 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2014      	movs	r0, #20
 8001716:	f001 fd7e 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800171a:	2014      	movs	r0, #20
 800171c:	f001 fd97 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40006400 	.word	0x40006400
 800172c:	40023800 	.word	0x40023800
 8001730:	40020400 	.word	0x40020400

08001734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <HAL_I2C_MspInit+0x84>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d12b      	bne.n	80017ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_I2C_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <HAL_I2C_MspInit+0x88>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_I2C_MspInit+0x88>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001772:	23c0      	movs	r3, #192	; 0xc0
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001776:	2312      	movs	r3, #18
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001782:	2304      	movs	r3, #4
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <HAL_I2C_MspInit+0x8c>)
 800178e:	f001 fd79 	bl	8003284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_I2C_MspInit+0x88>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_I2C_MspInit+0x88>)
 800179c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_I2C_MspInit+0x88>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40005400 	.word	0x40005400
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020400 	.word	0x40020400

080017c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_SPI_MspInit+0x84>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d12b      	bne.n	800183e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_SPI_MspInit+0x88>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <HAL_SPI_MspInit+0x88>)
 80017f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_SPI_MspInit+0x88>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_SPI_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_SPI_MspInit+0x88>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_SPI_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800181e:	23e0      	movs	r3, #224	; 0xe0
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182e:	2305      	movs	r3, #5
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_SPI_MspInit+0x8c>)
 800183a:	f001 fd23 	bl	8003284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40013000 	.word	0x40013000
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000

08001854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d134      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_TIM_Base_MspInit+0xcc>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a28      	ldr	r2, [pc, #160]	; (8001920 <HAL_TIM_Base_MspInit+0xcc>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_TIM_Base_MspInit+0xcc>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_TIM_Base_MspInit+0xcc>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a21      	ldr	r2, [pc, #132]	; (8001920 <HAL_TIM_Base_MspInit+0xcc>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <HAL_TIM_Base_MspInit+0xcc>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018ae:	2302      	movs	r3, #2
 80018b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018be:	2301      	movs	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4816      	ldr	r0, [pc, #88]	; (8001924 <HAL_TIM_Base_MspInit+0xd0>)
 80018ca:	f001 fcdb 	bl	8003284 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	201c      	movs	r0, #28
 80018d4:	f001 fc9f 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d8:	201c      	movs	r0, #28
 80018da:	f001 fcb8 	bl	800324e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80018de:	e01a      	b.n	8001916 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM7)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_TIM_Base_MspInit+0xd4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d115      	bne.n	8001916 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_TIM_Base_MspInit+0xcc>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_TIM_Base_MspInit+0xcc>)
 80018f4:	f043 0320 	orr.w	r3, r3, #32
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_TIM_Base_MspInit+0xcc>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2037      	movs	r0, #55	; 0x37
 800190c:	f001 fc83 	bl	8003216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001910:	2037      	movs	r0, #55	; 0x37
 8001912:	f001 fc9c 	bl	800324e <HAL_NVIC_EnableIRQ>
}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000
 8001928:	40001400 	.word	0x40001400

0800192c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_TIM_PWM_MspInit+0x3c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10d      	bne.n	800195a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_TIM_PWM_MspInit+0x40>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a09      	ldr	r2, [pc, #36]	; (800196c <HAL_TIM_PWM_MspInit+0x40>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <HAL_TIM_PWM_MspInit+0x40>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40000400 	.word	0x40000400
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_TIM_MspPostInit+0x68>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d11d      	bne.n	80019ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_TIM_MspPostInit+0x6c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_TIM_MspPostInit+0x6c>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_TIM_MspPostInit+0x6c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019ae:	2340      	movs	r3, #64	; 0x40
 80019b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019be:	2302      	movs	r3, #2
 80019c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_TIM_MspPostInit+0x70>)
 80019ca:	f001 fc5b 	bl	8003284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40000400 	.word	0x40000400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020800 	.word	0x40020800

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <NMI_Handler+0x4>

080019ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 fc30 	bl	8002294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);	// reads CAN message
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <CAN1_RX0_IRQHandler+0x24>)
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <CAN1_RX0_IRQHandler+0x28>)
 8001a40:	2100      	movs	r1, #0
 8001a42:	4808      	ldr	r0, [pc, #32]	; (8001a64 <CAN1_RX0_IRQHandler+0x2c>)
 8001a44:	f000 ff9a 	bl	800297c <HAL_CAN_GetRxMessage>
	My_CAN_Rx_Handler(&RxHeader, RxData);	// My handler function
 8001a48:	4904      	ldr	r1, [pc, #16]	; (8001a5c <CAN1_RX0_IRQHandler+0x24>)
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <CAN1_RX0_IRQHandler+0x28>)
 8001a4c:	f000 fab8 	bl	8001fc0 <My_CAN_Rx_Handler>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <CAN1_RX0_IRQHandler+0x2c>)
 8001a52:	f001 f8cb 	bl	8002bec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001ec 	.word	0x200001ec
 8001a60:	2000027c 	.word	0x2000027c
 8001a64:	2000023c 	.word	0x2000023c

08001a68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	flag_tim2++;
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <TIM2_IRQHandler+0x18>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a03      	ldr	r2, [pc, #12]	; (8001a80 <TIM2_IRQHandler+0x18>)
 8001a74:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <TIM2_IRQHandler+0x1c>)
 8001a78:	f003 ffc4 	bl	8005a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200000ac 	.word	0x200000ac
 8001a84:	200001f4 	.word	0x200001f4

08001a88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a8c:	b088      	sub	sp, #32
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	// read current angle from the encoder
	int timer_period = 0, target_velocity_ticks, flag_2;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
	angle_rad_prev = angle_rad;
 8001a94:	4bbe      	ldr	r3, [pc, #760]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4abe      	ldr	r2, [pc, #760]	; (8001d94 <TIM7_IRQHandler+0x30c>)
 8001a9a:	6013      	str	r3, [r2, #0]
	angle_rad = read_angle();
 8001a9c:	f000 fabc 	bl	8002018 <read_angle>
 8001aa0:	eef0 7a40 	vmov.f32	s15, s0
 8001aa4:	4bba      	ldr	r3, [pc, #744]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
	// calculate velocity
	if(abs(angle_rad_prev - angle_rad) < M_PI ){
 8001aaa:	4bba      	ldr	r3, [pc, #744]	; (8001d94 <TIM7_IRQHandler+0x30c>)
 8001aac:	ed93 7a00 	vldr	s14, [r3]
 8001ab0:	4bb7      	ldr	r3, [pc, #732]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001abe:	ee17 3a90 	vmov	r3, s15
 8001ac2:	f113 0f03 	cmn.w	r3, #3
 8001ac6:	db1c      	blt.n	8001b02 <TIM7_IRQHandler+0x7a>
 8001ac8:	4bb2      	ldr	r3, [pc, #712]	; (8001d94 <TIM7_IRQHandler+0x30c>)
 8001aca:	ed93 7a00 	vldr	s14, [r3]
 8001ace:	4bb0      	ldr	r3, [pc, #704]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001adc:	ee17 3a90 	vmov	r3, s15
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	dc0e      	bgt.n	8001b02 <TIM7_IRQHandler+0x7a>
		velocity = (angle_rad - angle_rad_prev) * USER_TIMER_FREQUENCY;
 8001ae4:	4baa      	ldr	r3, [pc, #680]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001ae6:	ed93 7a00 	vldr	s14, [r3]
 8001aea:	4baa      	ldr	r3, [pc, #680]	; (8001d94 <TIM7_IRQHandler+0x30c>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af4:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001d98 <TIM7_IRQHandler+0x310>
 8001af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afc:	4ba7      	ldr	r3, [pc, #668]	; (8001d9c <TIM7_IRQHandler+0x314>)
 8001afe:	edc3 7a00 	vstr	s15, [r3]
	}
	// change direction based on required motor velocity
	if(target_velocity < 0){
 8001b02:	4ba7      	ldr	r3, [pc, #668]	; (8001da0 <TIM7_IRQHandler+0x318>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	d505      	bpl.n	8001b1e <TIM7_IRQHandler+0x96>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	48a3      	ldr	r0, [pc, #652]	; (8001da4 <TIM7_IRQHandler+0x31c>)
 8001b18:	f001 fd48 	bl	80035ac <HAL_GPIO_WritePin>
 8001b1c:	e004      	b.n	8001b28 <TIM7_IRQHandler+0xa0>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	48a0      	ldr	r0, [pc, #640]	; (8001da4 <TIM7_IRQHandler+0x31c>)
 8001b24:	f001 fd42 	bl	80035ac <HAL_GPIO_WritePin>
	}
	// for some reason 0 and nan are the same value in IEEE float16, so we have to do this check.
	if(isnan(target_velocity)){
 8001b28:	4b9d      	ldr	r3, [pc, #628]	; (8001da0 <TIM7_IRQHandler+0x318>)
 8001b2a:	ed93 7a00 	vldr	s14, [r3]
 8001b2e:	4b9c      	ldr	r3, [pc, #624]	; (8001da0 <TIM7_IRQHandler+0x318>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3c:	d703      	bvc.n	8001b46 <TIM7_IRQHandler+0xbe>
		target_velocity = 0.0;
 8001b3e:	4b98      	ldr	r3, [pc, #608]	; (8001da0 <TIM7_IRQHandler+0x318>)
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
	}
	// calculate target velocity in ticks/s with current step value
	float temp1 =  target_velocity > 0 ? target_velocity : (-1) * target_velocity;
 8001b46:	4b96      	ldr	r3, [pc, #600]	; (8001da0 <TIM7_IRQHandler+0x318>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	dd03      	ble.n	8001b5e <TIM7_IRQHandler+0xd6>
 8001b56:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <TIM7_IRQHandler+0x318>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	e004      	b.n	8001b68 <TIM7_IRQHandler+0xe0>
 8001b5e:	4b90      	ldr	r3, [pc, #576]	; (8001da0 <TIM7_IRQHandler+0x318>)
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	eef1 7a67 	vneg.f32	s15, s15
 8001b68:	edc7 7a04 	vstr	s15, [r7, #16]
	float temp2 =  angle_rad - target_angle > 0 ? angle_rad - target_angle : (-1) * (angle_rad - target_angle);
 8001b6c:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001b6e:	ed93 7a00 	vldr	s14, [r3]
 8001b72:	4b8d      	ldr	r3, [pc, #564]	; (8001da8 <TIM7_IRQHandler+0x320>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b84:	dd08      	ble.n	8001b98 <TIM7_IRQHandler+0x110>
 8001b86:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001b88:	ed93 7a00 	vldr	s14, [r3]
 8001b8c:	4b86      	ldr	r3, [pc, #536]	; (8001da8 <TIM7_IRQHandler+0x320>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b96:	e009      	b.n	8001bac <TIM7_IRQHandler+0x124>
 8001b98:	4b7d      	ldr	r3, [pc, #500]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	4b82      	ldr	r3, [pc, #520]	; (8001da8 <TIM7_IRQHandler+0x320>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	eef1 7a67 	vneg.f32	s15, s15
 8001bac:	edc7 7a03 	vstr	s15, [r7, #12]
	float temp3 = angle_rad + (2*M_PI - target_angle) > target_angle + (2*M_PI - angle_rad) ? target_angle + (2*M_PI - angle_rad) : angle_rad + (2*M_PI - target_angle);
 8001bb0:	4b77      	ldr	r3, [pc, #476]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fc8b 	bl	80004d0 <__aeabi_f2d>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	460d      	mov	r5, r1
 8001bbe:	4b7a      	ldr	r3, [pc, #488]	; (8001da8 <TIM7_IRQHandler+0x320>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fc84 	bl	80004d0 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	a168      	add	r1, pc, #416	; (adr r1, 8001d70 <TIM7_IRQHandler+0x2e8>)
 8001bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bd2:	f7fe fb1d 	bl	8000210 <__aeabi_dsub>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb19 	bl	8000214 <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4690      	mov	r8, r2
 8001be8:	4699      	mov	r9, r3
 8001bea:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <TIM7_IRQHandler+0x320>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc6e 	bl	80004d0 <__aeabi_f2d>
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	460d      	mov	r5, r1
 8001bf8:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc67 	bl	80004d0 <__aeabi_f2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	a15a      	add	r1, pc, #360	; (adr r1, 8001d70 <TIM7_IRQHandler+0x2e8>)
 8001c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c0c:	f7fe fb00 	bl	8000210 <__aeabi_dsub>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fafc 	bl	8000214 <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4640      	mov	r0, r8
 8001c22:	4649      	mov	r1, r9
 8001c24:	f7fe ff3c 	bl	8000aa0 <__aeabi_dcmpgt>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01b      	beq.n	8001c66 <TIM7_IRQHandler+0x1de>
 8001c2e:	4b5e      	ldr	r3, [pc, #376]	; (8001da8 <TIM7_IRQHandler+0x320>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc4c 	bl	80004d0 <__aeabi_f2d>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc45 	bl	80004d0 <__aeabi_f2d>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	a149      	add	r1, pc, #292	; (adr r1, 8001d70 <TIM7_IRQHandler+0x2e8>)
 8001c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c50:	f7fe fade 	bl	8000210 <__aeabi_dsub>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4620      	mov	r0, r4
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	f7fe fada 	bl	8000214 <__adddf3>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	e01a      	b.n	8001c9c <TIM7_IRQHandler+0x214>
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <TIM7_IRQHandler+0x308>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc30 	bl	80004d0 <__aeabi_f2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <TIM7_IRQHandler+0x320>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc29 	bl	80004d0 <__aeabi_f2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	a13b      	add	r1, pc, #236	; (adr r1, 8001d70 <TIM7_IRQHandler+0x2e8>)
 8001c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c88:	f7fe fac2 	bl	8000210 <__aeabi_dsub>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4620      	mov	r0, r4
 8001c92:	4629      	mov	r1, r5
 8001c94:	f7fe fabe 	bl	8000214 <__adddf3>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe ff46 	bl	8000b30 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60bb      	str	r3, [r7, #8]
	float angle_difference = temp2 > temp3 ? temp3 : temp2;
 8001ca8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	dd01      	ble.n	8001cbe <TIM7_IRQHandler+0x236>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	e000      	b.n	8001cc0 <TIM7_IRQHandler+0x238>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	607b      	str	r3, [r7, #4]
	if(angle_difference * USER_TIMER_FREQUENCY * 0.8  < sqrt(temp1) || temp1 < 0.001 && temp2 < 0.1){
 8001cc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001d98 <TIM7_IRQHandler+0x310>
 8001cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cce:	ee17 0a90 	vmov	r0, s15
 8001cd2:	f7fe fbfd 	bl	80004d0 <__aeabi_f2d>
 8001cd6:	a328      	add	r3, pc, #160	; (adr r3, 8001d78 <TIM7_IRQHandler+0x2f0>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fc50 	bl	8000580 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	6938      	ldr	r0, [r7, #16]
 8001cea:	f7fe fbf1 	bl	80004d0 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	ec43 2b10 	vmov	d0, r2, r3
 8001cf6:	f004 fd67 	bl	80067c8 <sqrt>
 8001cfa:	ec53 2b10 	vmov	r2, r3, d0
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe feaf 	bl	8000a64 <__aeabi_dcmplt>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d115      	bne.n	8001d38 <TIM7_IRQHandler+0x2b0>
 8001d0c:	6938      	ldr	r0, [r7, #16]
 8001d0e:	f7fe fbdf 	bl	80004d0 <__aeabi_f2d>
 8001d12:	a31b      	add	r3, pc, #108	; (adr r3, 8001d80 <TIM7_IRQHandler+0x2f8>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fea4 	bl	8000a64 <__aeabi_dcmplt>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d014      	beq.n	8001d4c <TIM7_IRQHandler+0x2c4>
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7fe fbd4 	bl	80004d0 <__aeabi_f2d>
 8001d28:	a317      	add	r3, pc, #92	; (adr r3, 8001d88 <TIM7_IRQHandler+0x300>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fe99 	bl	8000a64 <__aeabi_dcmplt>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <TIM7_IRQHandler+0x2c4>
//		target_velocity_ticks = (target_velocity > 0 ? target_velocity : -1 * target_velocity)  * stepper_step_denominator * 100.0 * GEAR_RATIO/ M_PI;
		target_velocity_ticks = 0 ;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
		target_velocity = 0;
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <TIM7_IRQHandler+0x318>)
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
		goal_status = 1;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <TIM7_IRQHandler+0x324>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	e061      	b.n	8001e10 <TIM7_IRQHandler+0x388>
	}
	else{
		goal_status = 0;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <TIM7_IRQHandler+0x324>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
		target_velocity_ticks = (target_velocity > 0 ? target_velocity : -1 * target_velocity)  * stepper_step_denominator * 100.0 * GEAR_RATIO/ M_PI;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <TIM7_IRQHandler+0x318>)
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	dd26      	ble.n	8001db0 <TIM7_IRQHandler+0x328>
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <TIM7_IRQHandler+0x318>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	e027      	b.n	8001dba <TIM7_IRQHandler+0x332>
 8001d6a:	bf00      	nop
 8001d6c:	f3af 8000 	nop.w
 8001d70:	54442d18 	.word	0x54442d18
 8001d74:	401921fb 	.word	0x401921fb
 8001d78:	9999999a 	.word	0x9999999a
 8001d7c:	3fe99999 	.word	0x3fe99999
 8001d80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d84:	3f50624d 	.word	0x3f50624d
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	3fb99999 	.word	0x3fb99999
 8001d90:	20000190 	.word	0x20000190
 8001d94:	200000b0 	.word	0x200000b0
 8001d98:	42c80000 	.word	0x42c80000
 8001d9c:	2000009c 	.word	0x2000009c
 8001da0:	20000094 	.word	0x20000094
 8001da4:	40020800 	.word	0x40020800
 8001da8:	20000098 	.word	0x20000098
 8001dac:	200000a0 	.word	0x200000a0
 8001db0:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <TIM7_IRQHandler+0x4f8>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	eef1 7a67 	vneg.f32	s15, s15
 8001dba:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <TIM7_IRQHandler+0x4fc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	ee07 3a10 	vmov	s14, r3
 8001dc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fb7f 	bl	80004d0 <__aeabi_f2d>
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	4b6c      	ldr	r3, [pc, #432]	; (8001f88 <TIM7_IRQHandler+0x500>)
 8001dd8:	f7fe fbd2 	bl	8000580 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	4b68      	ldr	r3, [pc, #416]	; (8001f8c <TIM7_IRQHandler+0x504>)
 8001dea:	f7fe fbc9 	bl	8000580 <__aeabi_dmul>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	a35e      	add	r3, pc, #376	; (adr r3, 8001f70 <TIM7_IRQHandler+0x4e8>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fcea 	bl	80007d4 <__aeabi_ddiv>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f7fe fe6a 	bl	8000ae0 <__aeabi_d2iz>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	61fb      	str	r3, [r7, #28]
	}
// 	convert and send CAN message
	Angle_To_CAN_Data(angle_rad, velocity, goal_status, stall_status, TxData);
 8001e10:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <TIM7_IRQHandler+0x508>)
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <TIM7_IRQHandler+0x50c>)
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	4b5e      	ldr	r3, [pc, #376]	; (8001f98 <TIM7_IRQHandler+0x510>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4a5e      	ldr	r2, [pc, #376]	; (8001f9c <TIM7_IRQHandler+0x514>)
 8001e22:	7811      	ldrb	r1, [r2, #0]
 8001e24:	4a5e      	ldr	r2, [pc, #376]	; (8001fa0 <TIM7_IRQHandler+0x518>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	eef0 0a47 	vmov.f32	s1, s14
 8001e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e30:	f000 f95c 	bl	80020ec <Angle_To_CAN_Data>
	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0){
 8001e34:	485b      	ldr	r0, [pc, #364]	; (8001fa4 <TIM7_IRQHandler+0x51c>)
 8001e36:	f000 fd6c 	bl	8002912 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <TIM7_IRQHandler+0x3ce>
//		flag_tim7++;
		if ( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <TIM7_IRQHandler+0x520>)
 8001e42:	4a57      	ldr	r2, [pc, #348]	; (8001fa0 <TIM7_IRQHandler+0x518>)
 8001e44:	4959      	ldr	r1, [pc, #356]	; (8001fac <TIM7_IRQHandler+0x524>)
 8001e46:	4857      	ldr	r0, [pc, #348]	; (8001fa4 <TIM7_IRQHandler+0x51c>)
 8001e48:	f000 fc88 	bl	800275c <HAL_CAN_AddTxMessage>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <TIM7_IRQHandler+0x3ce>
			Error_Handler();
 8001e52:	f7ff fbf1 	bl	8001638 <Error_Handler>
		}
	}
	flag_tim7++;
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <TIM7_IRQHandler+0x528>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	4a54      	ldr	r2, [pc, #336]	; (8001fb0 <TIM7_IRQHandler+0x528>)
 8001e5e:	6013      	str	r3, [r2, #0]
	flag_2 = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
	// adjust step value to the is tested limits. Needed to avoid vibration on lower and higher speeds
	while(1){
		flag++ ;
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <TIM7_IRQHandler+0x52c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <TIM7_IRQHandler+0x52c>)
 8001e6c:	6013      	str	r3, [r2, #0]
		if(target_velocity_ticks > 3000 && stepper_step_denominator > 1){
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e74:	4293      	cmp	r3, r2
 8001e76:	dd11      	ble.n	8001e9c <TIM7_IRQHandler+0x414>
 8001e78:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <TIM7_IRQHandler+0x4fc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	dd0d      	ble.n	8001e9c <TIM7_IRQHandler+0x414>
			stepper_step_denominator /=2;
 8001e80:	4b40      	ldr	r3, [pc, #256]	; (8001f84 <TIM7_IRQHandler+0x4fc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0fda      	lsrs	r2, r3, #31
 8001e86:	4413      	add	r3, r2
 8001e88:	105b      	asrs	r3, r3, #1
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <TIM7_IRQHandler+0x4fc>)
 8001e8e:	601a      	str	r2, [r3, #0]
			target_velocity_ticks /= 2;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	0fda      	lsrs	r2, r3, #31
 8001e94:	4413      	add	r3, r2
 8001e96:	105b      	asrs	r3, r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e010      	b.n	8001ebe <TIM7_IRQHandler+0x436>
		}
		else{
			if(target_velocity_ticks < 1500 && stepper_step_denominator < 256){
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f240 52db 	movw	r2, #1499	; 0x5db
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	dc0e      	bgt.n	8001ec4 <TIM7_IRQHandler+0x43c>
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <TIM7_IRQHandler+0x4fc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2bff      	cmp	r3, #255	; 0xff
 8001eac:	dc0a      	bgt.n	8001ec4 <TIM7_IRQHandler+0x43c>
				stepper_step_denominator *= 2;
 8001eae:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <TIM7_IRQHandler+0x4fc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4a33      	ldr	r2, [pc, #204]	; (8001f84 <TIM7_IRQHandler+0x4fc>)
 8001eb6:	6013      	str	r3, [r2, #0]
				target_velocity_ticks *= 2;
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	61fb      	str	r3, [r7, #28]
			}
			else{
				break;
			}
		}
		flag_2= 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
		flag++ ;
 8001ec2:	e7cf      	b.n	8001e64 <TIM7_IRQHandler+0x3dc>
	}

	// write modified step to the registry if it was modified
	if(flag_2 != 0){
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <TIM7_IRQHandler+0x446>
		CTRL_Reg_Set();
 8001eca:	f7ff fb1b 	bl	8001504 <CTRL_Reg_Set>
	}
	// avoid dividing by zero in the next line
	if (target_velocity_ticks == 0){
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <TIM7_IRQHandler+0x454>
		TIM3->CCR1 =  0;
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <TIM7_IRQHandler+0x530>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eda:	e03f      	b.n	8001f5c <TIM7_IRQHandler+0x4d4>
	}
	// calculates and sets timer period to achieve the required speed, avoids too low or too high values
	else{
		timer_period = APB1_TIMER_CLOCK_FREQUENCY/((STEPPER_PWM_PRESCALER + 1) * target_velocity_ticks); // clock frequency/(prescaler * gear_ratio * speed_ticks/s)
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009a      	lsls	r2, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fadf 	bl	80004ac <__aeabi_i2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	a121      	add	r1, pc, #132	; (adr r1, 8001f78 <TIM7_IRQHandler+0x4f0>)
 8001ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ef8:	f7fe fc6c 	bl	80007d4 <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7fe fdec 	bl	8000ae0 <__aeabi_d2iz>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	617b      	str	r3, [r7, #20]
//		flag_tim7++;
		if(timer_period > 65535){
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f12:	db02      	blt.n	8001f1a <TIM7_IRQHandler+0x492>
			TIM3->CCR1 =  0;
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <TIM7_IRQHandler+0x530>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(timer_period < 999){
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001f20:	4293      	cmp	r3, r2
 8001f22:	dc09      	bgt.n	8001f38 <TIM7_IRQHandler+0x4b0>
			TIM3->ARR = 999;
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <TIM7_IRQHandler+0x530>)
 8001f26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 =  (TIM3->ARR + 1)/2;
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <TIM7_IRQHandler+0x530>)
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <TIM7_IRQHandler+0x530>)
 8001f34:	085b      	lsrs	r3, r3, #1
 8001f36:	6353      	str	r3, [r2, #52]	; 0x34
		}

		if(timer_period >= 999 && timer_period <= 65535){
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	dd0c      	ble.n	8001f5c <TIM7_IRQHandler+0x4d4>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	da08      	bge.n	8001f5c <TIM7_IRQHandler+0x4d4>
			TIM3->ARR = timer_period;
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <TIM7_IRQHandler+0x530>)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR1 =  (TIM3->ARR + 1)/2;
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <TIM7_IRQHandler+0x530>)
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	3301      	adds	r3, #1
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <TIM7_IRQHandler+0x530>)
 8001f58:	085b      	lsrs	r3, r3, #1
 8001f5a:	6353      	str	r3, [r2, #52]	; 0x34
		}
	}

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f5c:	4817      	ldr	r0, [pc, #92]	; (8001fbc <TIM7_IRQHandler+0x534>)
 8001f5e:	f003 fd51 	bl	8005a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f6c:	f3af 8000 	nop.w
 8001f70:	54442d18 	.word	0x54442d18
 8001f74:	400921fb 	.word	0x400921fb
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	419312d0 	.word	0x419312d0
 8001f80:	20000094 	.word	0x20000094
 8001f84:	20000000 	.word	0x20000000
 8001f88:	40590000 	.word	0x40590000
 8001f8c:	40490000 	.word	0x40490000
 8001f90:	20000190 	.word	0x20000190
 8001f94:	2000009c 	.word	0x2000009c
 8001f98:	200000a0 	.word	0x200000a0
 8001f9c:	200000a1 	.word	0x200000a1
 8001fa0:	20000154 	.word	0x20000154
 8001fa4:	2000023c 	.word	0x2000023c
 8001fa8:	20000188 	.word	0x20000188
 8001fac:	20000264 	.word	0x20000264
 8001fb0:	200000a8 	.word	0x200000a8
 8001fb4:	200000a4 	.word	0x200000a4
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	20000298 	.word	0x20000298

08001fc0 <My_CAN_Rx_Handler>:

/* USER CODE BEGIN 1 */
void My_CAN_Rx_Handler( CAN_RxHeaderTypeDef* RxHeader, uint8_t* RxData){
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	flag_tim7 = 0;
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <My_CAN_Rx_Handler+0x48>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
	if(RxHeader->StdId == MY_CAN_ID){	// checks received ID against this device's ID
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d110      	bne.n	8001ffa <My_CAN_Rx_Handler+0x3a>
		// what to do
//		__fp16* temp_float16 = RxData;
		float* temp = RxData;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	60fb      	str	r3, [r7, #12]
//		target_angle = *temp_float16;
		target_angle = *temp;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <My_CAN_Rx_Handler+0x4c>)
 8001fe2:	6013      	str	r3, [r2, #0]
	//	if(isnan(target_angle)){
	//		target_velocity = 0.0;
	//	}
		temp = RxData + 4;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	60fb      	str	r3, [r7, #12]

//		target_velocity = *temp_float16;
		target_velocity = *temp;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <My_CAN_Rx_Handler+0x50>)
 8001ff0:	6013      	str	r3, [r2, #0]
		goal_status = 0;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <My_CAN_Rx_Handler+0x54>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
//		ticks_to_make = Angle_To_Ticks(target_angle_rad);	// change target ticks value
	}
	return;
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
}
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	200000a8 	.word	0x200000a8
 800200c:	20000098 	.word	0x20000098
 8002010:	20000094 	.word	0x20000094
 8002014:	200000a0 	.word	0x200000a0

08002018 <read_angle>:

float read_angle(){
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[12];	// temporaty buffer for i2c message transmition
	uint8_t buf_recv[12];	// temporaty buffer for i2c message reception
	buf[0] = 0x0E;
 800201e:	230e      	movs	r3, #14
 8002020:	743b      	strb	r3, [r7, #16]
	ret = HAL_I2C_Master_Transmit(&hi2c1, (0b0110110 << 1) , buf, 1, HAL_MAX_DELAY);
 8002022:	f107 0210 	add.w	r2, r7, #16
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2301      	movs	r3, #1
 800202e:	216c      	movs	r1, #108	; 0x6c
 8002030:	4812      	ldr	r0, [pc, #72]	; (800207c <read_angle+0x64>)
 8002032:	f001 fc19 	bl	8003868 <HAL_I2C_Master_Transmit>
 8002036:	4603      	mov	r3, r0
 8002038:	77fb      	strb	r3, [r7, #31]
	if(ret == HAL_OK ){
//		flag ++;
	}
	ret = HAL_I2C_Master_Receive(&hi2c1, 0b0110110 << 1, buf_recv, 2, HAL_MAX_DELAY);
 800203a:	1d3a      	adds	r2, r7, #4
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2302      	movs	r3, #2
 8002044:	216c      	movs	r1, #108	; 0x6c
 8002046:	480d      	ldr	r0, [pc, #52]	; (800207c <read_angle+0x64>)
 8002048:	f001 fd0c 	bl	8003a64 <HAL_I2C_Master_Receive>
 800204c:	4603      	mov	r3, r0
 800204e:	77fb      	strb	r3, [r7, #31]
	if(ret == HAL_OK ){
//		flag --;
	}
	angle_rad = Ticks_To_Angle(buf_recv[1] + buf_recv[0] * 256);
 8002050:	797b      	ldrb	r3, [r7, #5]
 8002052:	461a      	mov	r2, r3
 8002054:	793b      	ldrb	r3, [r7, #4]
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	4413      	add	r3, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f814 	bl	8002088 <Ticks_To_Angle>
 8002060:	eef0 7a40 	vmov.f32	s15, s0
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <read_angle+0x68>)
 8002066:	edc3 7a00 	vstr	s15, [r3]
	return angle_rad;
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <read_angle+0x68>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	ee07 3a90 	vmov	s15, r3
}
 8002072:	eeb0 0a67 	vmov.f32	s0, s15
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200000b8 	.word	0x200000b8
 8002080:	20000190 	.word	0x20000190
 8002084:	00000000 	.word	0x00000000

08002088 <Ticks_To_Angle>:


float Ticks_To_Angle(int ticks){
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	return  (ticks)* M_PI * 2.0  / 4096.0;
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7fe fa0b 	bl	80004ac <__aeabi_i2d>
 8002096:	a313      	add	r3, pc, #76	; (adr r3, 80020e4 <Ticks_To_Angle+0x5c>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe fa70 	bl	8000580 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	f7fe f8b2 	bl	8000214 <__adddf3>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <Ticks_To_Angle+0x58>)
 80020be:	f7fe fb89 	bl	80007d4 <__aeabi_ddiv>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7fe fd31 	bl	8000b30 <__aeabi_d2f>
 80020ce:	4603      	mov	r3, r0
 80020d0:	ee07 3a90 	vmov	s15, r3
}
 80020d4:	eeb0 0a67 	vmov.f32	s0, s15
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40b00000 	.word	0x40b00000
 80020e4:	54442d18 	.word	0x54442d18
 80020e8:	400921fb 	.word	0x400921fb

080020ec <Angle_To_CAN_Data>:



int Angle_To_CAN_Data(float angle, float speed, char goal_status, char stall_status ,uint8_t* TxData){
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80020f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80020fa:	4603      	mov	r3, r0
 80020fc:	603a      	str	r2, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
 8002100:	460b      	mov	r3, r1
 8002102:	71bb      	strb	r3, [r7, #6]
	// pack angle
	__fp16 temp_float16 = angle;
 8002104:	edd7 7a03 	vldr	s15, [r7, #12]
 8002108:	eef3 7a67 	vcvtb.f16.f32	s15, s15
 800210c:	ee17 3a90 	vmov	r3, s15
 8002110:	827b      	strh	r3, [r7, #18]
	char* temp_char = &temp_float16;
 8002112:	f107 0312 	add.w	r3, r7, #18
 8002116:	617b      	str	r3, [r7, #20]
	TxData[0] = temp_char[0];
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	701a      	strb	r2, [r3, #0]
	TxData[1] = temp_char[1];
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	701a      	strb	r2, [r3, #0]
	//pack velocity
	temp_float16 = speed;
 800212c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002130:	eef3 7a67 	vcvtb.f16.f32	s15, s15
 8002134:	ee17 3a90 	vmov	r3, s15
 8002138:	827b      	strh	r3, [r7, #18]
	temp_char = &temp_float16;
 800213a:	f107 0312 	add.w	r3, r7, #18
 800213e:	617b      	str	r3, [r7, #20]
	TxData[2] = temp_char[2];
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1c9a      	adds	r2, r3, #2
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	3302      	adds	r3, #2
 8002148:	7812      	ldrb	r2, [r2, #0]
 800214a:	701a      	strb	r2, [r3, #0]
	TxData[3] = temp_char[3];
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	1cda      	adds	r2, r3, #3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	3303      	adds	r3, #3
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	701a      	strb	r2, [r3, #0]
	//pack goal_status. 0 if goal not reached, 1 if it is reached.
	TxData[4] = goal_status;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	3304      	adds	r3, #4
 800215c:	79fa      	ldrb	r2, [r7, #7]
 800215e:	701a      	strb	r2, [r3, #0]
	//pack stall_status. 0 if the motor has not stalled, 1 if it has.
	TxData[5] = stall_status;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	3305      	adds	r3, #5
 8002164:	79ba      	ldrb	r2, [r7, #6]
 8002166:	701a      	strb	r2, [r3, #0]
	TxData[4] = temp_char[0];
	TxData[5] = temp_char[1];
	TxData[6] = temp_char[2];
	TxData[7] = temp_char[3];
*/
	return 1;
 8002168:	2301      	movs	r3, #1
}
 800216a:	4618      	mov	r0, r3
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <SystemInit+0x20>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <SystemInit+0x20>)
 8002184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800219c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a0:	480d      	ldr	r0, [pc, #52]	; (80021d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021a2:	490e      	ldr	r1, [pc, #56]	; (80021dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b8:	4c0b      	ldr	r4, [pc, #44]	; (80021e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021c6:	f7ff ffd7 	bl	8002178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ca:	f004 fad1 	bl	8006770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ce:	f7fe fe7b 	bl	8000ec8 <main>
  bx  lr    
 80021d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80021e0:	080069d8 	.word	0x080069d8
  ldr r2, =_sbss
 80021e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80021e8:	200002e4 	.word	0x200002e4

080021ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC_IRQHandler>
	...

080021f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <HAL_Init+0x40>)
 80021fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_Init+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_Init+0x40>)
 8002206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800220a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_Init+0x40>)
 8002212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002218:	2003      	movs	r0, #3
 800221a:	f000 fff1 	bl	8003200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221e:	200f      	movs	r0, #15
 8002220:	f000 f808 	bl	8002234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002224:	f7ff fa0e 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023c00 	.word	0x40023c00

08002234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_InitTick+0x54>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_InitTick+0x58>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224a:	fbb3 f3f1 	udiv	r3, r3, r1
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	4618      	mov	r0, r3
 8002254:	f001 f809 	bl	800326a <HAL_SYSTICK_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e00e      	b.n	8002280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b0f      	cmp	r3, #15
 8002266:	d80a      	bhi.n	800227e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f000 ffd1 	bl	8003216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002274:	4a06      	ldr	r2, [pc, #24]	; (8002290 <HAL_InitTick+0x5c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000004 	.word	0x20000004
 800228c:	2000000c 	.word	0x2000000c
 8002290:	20000008 	.word	0x20000008

08002294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x20>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_IncTick+0x24>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <HAL_IncTick+0x24>)
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	2000000c 	.word	0x2000000c
 80022b8:	200002e0 	.word	0x200002e0

080022bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_GetTick+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	200002e0 	.word	0x200002e0

080022d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff ffee 	bl	80022bc <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d005      	beq.n	80022fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_Delay+0x44>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022fa:	bf00      	nop
 80022fc:	f7ff ffde 	bl	80022bc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	429a      	cmp	r2, r3
 800230a:	d8f7      	bhi.n	80022fc <HAL_Delay+0x28>
  {
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000000c 	.word	0x2000000c

0800231c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0ed      	b.n	800250a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff f9aa 	bl	8001694 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002350:	f7ff ffb4 	bl	80022bc <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002356:	e012      	b.n	800237e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002358:	f7ff ffb0 	bl	80022bc <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b0a      	cmp	r3, #10
 8002364:	d90b      	bls.n	800237e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2205      	movs	r2, #5
 8002376:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0c5      	b.n	800250a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0e5      	beq.n	8002358 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0202 	bic.w	r2, r2, #2
 800239a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800239c:	f7ff ff8e 	bl	80022bc <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023a2:	e012      	b.n	80023ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023a4:	f7ff ff8a 	bl	80022bc <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b0a      	cmp	r3, #10
 80023b0:	d90b      	bls.n	80023ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2205      	movs	r2, #5
 80023c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e09f      	b.n	800250a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e5      	bne.n	80023a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e007      	b.n	8002402 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7e5b      	ldrb	r3, [r3, #25]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d108      	bne.n	800241c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	e007      	b.n	800242c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800242a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	7e9b      	ldrb	r3, [r3, #26]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d108      	bne.n	8002446 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0220 	orr.w	r2, r2, #32
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e007      	b.n	8002456 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0220 	bic.w	r2, r2, #32
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7edb      	ldrb	r3, [r3, #27]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d108      	bne.n	8002470 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0210 	bic.w	r2, r2, #16
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e007      	b.n	8002480 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0210 	orr.w	r2, r2, #16
 800247e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7f1b      	ldrb	r3, [r3, #28]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d108      	bne.n	800249a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0208 	orr.w	r2, r2, #8
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e007      	b.n	80024aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0208 	bic.w	r2, r2, #8
 80024a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7f5b      	ldrb	r3, [r3, #29]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d108      	bne.n	80024c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0204 	orr.w	r2, r2, #4
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	e007      	b.n	80024d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0204 	bic.w	r2, r2, #4
 80024d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	ea42 0103 	orr.w	r1, r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800252a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d003      	beq.n	800253a <HAL_CAN_ConfigFilter+0x26>
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	2b02      	cmp	r3, #2
 8002536:	f040 80be 	bne.w	80026b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800253c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002554:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	431a      	orrs	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2201      	movs	r2, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43db      	mvns	r3, r3
 800258c:	401a      	ands	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d123      	bne.n	80025e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	401a      	ands	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3248      	adds	r2, #72	; 0x48
 80025c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025da:	6979      	ldr	r1, [r7, #20]
 80025dc:	3348      	adds	r3, #72	; 0x48
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	440b      	add	r3, r1
 80025e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d122      	bne.n	8002632 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800260c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3248      	adds	r2, #72	; 0x48
 8002612:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002626:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002628:	6979      	ldr	r1, [r7, #20]
 800262a:	3348      	adds	r3, #72	; 0x48
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43db      	mvns	r3, r3
 8002644:	401a      	ands	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800264c:	e007      	b.n	800265e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	431a      	orrs	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43db      	mvns	r3, r3
 8002670:	401a      	ands	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002678:	e007      	b.n	800268a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	431a      	orrs	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d107      	bne.n	80026a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	431a      	orrs	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026a8:	f023 0201 	bic.w	r2, r3, #1
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e006      	b.n	80026c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
  }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40006400 	.word	0x40006400

080026d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d12e      	bne.n	8002746 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002700:	f7ff fddc 	bl	80022bc <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002706:	e012      	b.n	800272e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002708:	f7ff fdd8 	bl	80022bc <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b0a      	cmp	r3, #10
 8002714:	d90b      	bls.n	800272e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2205      	movs	r2, #5
 8002726:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e012      	b.n	8002754 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e5      	bne.n	8002708 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e006      	b.n	8002754 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002770:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800277a:	7ffb      	ldrb	r3, [r7, #31]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d003      	beq.n	8002788 <HAL_CAN_AddTxMessage+0x2c>
 8002780:	7ffb      	ldrb	r3, [r7, #31]
 8002782:	2b02      	cmp	r3, #2
 8002784:	f040 80b8 	bne.w	80028f8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002798:	2b00      	cmp	r3, #0
 800279a:	d105      	bne.n	80027a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80a0 	beq.w	80028e8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	0e1b      	lsrs	r3, r3, #24
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d907      	bls.n	80027c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e09e      	b.n	8002906 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027c8:	2201      	movs	r2, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	409a      	lsls	r2, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027e4:	68f9      	ldr	r1, [r7, #12]
 80027e6:	6809      	ldr	r1, [r1, #0]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3318      	adds	r3, #24
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	440b      	add	r3, r1
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e00f      	b.n	8002816 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002800:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002806:	68f9      	ldr	r1, [r7, #12]
 8002808:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800280a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3318      	adds	r3, #24
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	440b      	add	r3, r1
 8002814:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6819      	ldr	r1, [r3, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3318      	adds	r3, #24
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	440b      	add	r3, r1
 8002826:	3304      	adds	r3, #4
 8002828:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	7d1b      	ldrb	r3, [r3, #20]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d111      	bne.n	8002856 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3318      	adds	r3, #24
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	6811      	ldr	r1, [r2, #0]
 8002846:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3318      	adds	r3, #24
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	440b      	add	r3, r1
 8002852:	3304      	adds	r3, #4
 8002854:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3307      	adds	r3, #7
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	061a      	lsls	r2, r3, #24
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3306      	adds	r3, #6
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3305      	adds	r3, #5
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	4313      	orrs	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	3204      	adds	r2, #4
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	4610      	mov	r0, r2
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	6811      	ldr	r1, [r2, #0]
 800287e:	ea43 0200 	orr.w	r2, r3, r0
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	440b      	add	r3, r1
 8002888:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800288c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3303      	adds	r3, #3
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	061a      	lsls	r2, r3, #24
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3302      	adds	r3, #2
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3301      	adds	r3, #1
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	4313      	orrs	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	4610      	mov	r0, r2
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	6811      	ldr	r1, [r2, #0]
 80028b4:	ea43 0200 	orr.w	r2, r3, r0
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	440b      	add	r3, r1
 80028be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80028c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3318      	adds	r3, #24
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	4413      	add	r3, r2
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	6811      	ldr	r1, [r2, #0]
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3318      	adds	r3, #24
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	440b      	add	r3, r1
 80028e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e00e      	b.n	8002906 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e006      	b.n	8002906 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
  }
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002924:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d002      	beq.n	8002932 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d11d      	bne.n	800296e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3301      	adds	r3, #1
 8002944:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3301      	adds	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3301      	adds	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002990:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d003      	beq.n	80029a0 <HAL_CAN_GetRxMessage+0x24>
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b02      	cmp	r3, #2
 800299c:	f040 80f3 	bne.w	8002b86 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10e      	bne.n	80029c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d116      	bne.n	80029e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0e7      	b.n	8002b94 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0d8      	b.n	8002b94 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	331b      	adds	r3, #27
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	4413      	add	r3, r2
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0204 	and.w	r2, r3, #4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10c      	bne.n	8002a1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	331b      	adds	r3, #27
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	4413      	add	r3, r2
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0d5b      	lsrs	r3, r3, #21
 8002a10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e00b      	b.n	8002a32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	331b      	adds	r3, #27
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	4413      	add	r3, r2
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	331b      	adds	r3, #27
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	4413      	add	r3, r2
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0202 	and.w	r2, r3, #2
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	331b      	adds	r3, #27
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	4413      	add	r3, r2
 8002a54:	3304      	adds	r3, #4
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 020f 	and.w	r2, r3, #15
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	331b      	adds	r3, #27
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	331b      	adds	r3, #27
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	4413      	add	r3, r2
 8002a84:	3304      	adds	r3, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	0a1a      	lsrs	r2, r3, #8
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	3301      	adds	r3, #1
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0c1a      	lsrs	r2, r3, #16
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	0e1a      	lsrs	r2, r3, #24
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	3303      	adds	r3, #3
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	3304      	adds	r3, #4
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0a1a      	lsrs	r2, r3, #8
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	3305      	adds	r3, #5
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	0c1a      	lsrs	r2, r3, #16
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	3306      	adds	r3, #6
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0e1a      	lsrs	r2, r3, #24
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	3307      	adds	r3, #7
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d108      	bne.n	8002b72 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0220 	orr.w	r2, r2, #32
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	e007      	b.n	8002b82 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0220 	orr.w	r2, r2, #32
 8002b80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e006      	b.n	8002b94 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d002      	beq.n	8002bbe <HAL_CAN_ActivateNotification+0x1e>
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d109      	bne.n	8002bd2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6959      	ldr	r1, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e006      	b.n	8002be0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
  }
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d07c      	beq.n	8002d2c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d023      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2201      	movs	r2, #1
 8002c42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f983 	bl	8002f5a <HAL_CAN_TxMailbox0CompleteCallback>
 8002c54:	e016      	b.n	8002c84 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
 8002c68:	e00c      	b.n	8002c84 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7c:	e002      	b.n	8002c84 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f989 	bl	8002f96 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d024      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f963 	bl	8002f6e <HAL_CAN_TxMailbox1CompleteCallback>
 8002ca8:	e016      	b.n	8002cd8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d004      	beq.n	8002cbe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbc:	e00c      	b.n	8002cd8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd0:	e002      	b.n	8002cd8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f969 	bl	8002faa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d024      	beq.n	8002d2c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f943 	bl	8002f82 <HAL_CAN_TxMailbox2CompleteCallback>
 8002cfc:	e016      	b.n	8002d2c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d10:	e00c      	b.n	8002d2c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d004      	beq.n	8002d26 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
 8002d24:	e002      	b.n	8002d2c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f949 	bl	8002fbe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00c      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f93a 	bl	8002fe6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f921 	bl	8002fd2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2210      	movs	r2, #16
 8002db2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d006      	beq.n	8002dd6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2208      	movs	r2, #8
 8002dce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f91c 	bl	800300e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f903 	bl	8002ffa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d006      	beq.n	8002e16 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f906 	bl	8003022 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00b      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2208      	movs	r2, #8
 8002e30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f8ff 	bl	8003036 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d07b      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d072      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f043 0302 	orr.w	r3, r3, #2
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d043      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d03e      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eba:	2b60      	cmp	r3, #96	; 0x60
 8002ebc:	d02b      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x32a>
 8002ebe:	2b60      	cmp	r3, #96	; 0x60
 8002ec0:	d82e      	bhi.n	8002f20 <HAL_CAN_IRQHandler+0x334>
 8002ec2:	2b50      	cmp	r3, #80	; 0x50
 8002ec4:	d022      	beq.n	8002f0c <HAL_CAN_IRQHandler+0x320>
 8002ec6:	2b50      	cmp	r3, #80	; 0x50
 8002ec8:	d82a      	bhi.n	8002f20 <HAL_CAN_IRQHandler+0x334>
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d019      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x316>
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d826      	bhi.n	8002f20 <HAL_CAN_IRQHandler+0x334>
 8002ed2:	2b30      	cmp	r3, #48	; 0x30
 8002ed4:	d010      	beq.n	8002ef8 <HAL_CAN_IRQHandler+0x30c>
 8002ed6:	2b30      	cmp	r3, #48	; 0x30
 8002ed8:	d822      	bhi.n	8002f20 <HAL_CAN_IRQHandler+0x334>
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d002      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x2f8>
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d005      	beq.n	8002eee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ee2:	e01d      	b.n	8002f20 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f043 0308 	orr.w	r3, r3, #8
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002eec:	e019      	b.n	8002f22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	f043 0310 	orr.w	r3, r3, #16
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ef6:	e014      	b.n	8002f22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f043 0320 	orr.w	r3, r3, #32
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f00:	e00f      	b.n	8002f22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f0a:	e00a      	b.n	8002f22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f14:	e005      	b.n	8002f22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f1e:	e000      	b.n	8002f22 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f20:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699a      	ldr	r2, [r3, #24]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f30:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2204      	movs	r2, #4
 8002f38:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f87c 	bl	800304a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f52:	bf00      	nop
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800307c:	4013      	ands	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800308c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003092:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	60d3      	str	r3, [r2, #12]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	f003 0307 	and.w	r3, r3, #7
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	db0b      	blt.n	80030ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	4907      	ldr	r1, [pc, #28]	; (80030fc <__NVIC_EnableIRQ+0x38>)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2001      	movs	r0, #1
 80030e6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e100 	.word	0xe000e100

08003100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db0a      	blt.n	800312a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	490c      	ldr	r1, [pc, #48]	; (800314c <__NVIC_SetPriority+0x4c>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	440b      	add	r3, r1
 8003124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003128:	e00a      	b.n	8003140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4908      	ldr	r1, [pc, #32]	; (8003150 <__NVIC_SetPriority+0x50>)
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	3b04      	subs	r3, #4
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	440b      	add	r3, r1
 800313e:	761a      	strb	r2, [r3, #24]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000e100 	.word	0xe000e100
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	; 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f1c3 0307 	rsb	r3, r3, #7
 800316e:	2b04      	cmp	r3, #4
 8003170:	bf28      	it	cs
 8003172:	2304      	movcs	r3, #4
 8003174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3304      	adds	r3, #4
 800317a:	2b06      	cmp	r3, #6
 800317c:	d902      	bls.n	8003184 <NVIC_EncodePriority+0x30>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3b03      	subs	r3, #3
 8003182:	e000      	b.n	8003186 <NVIC_EncodePriority+0x32>
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	f04f 32ff 	mov.w	r2, #4294967295
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	401a      	ands	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800319c:	f04f 31ff 	mov.w	r1, #4294967295
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	43d9      	mvns	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	4313      	orrs	r3, r2
         );
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	; 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031cc:	d301      	bcc.n	80031d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ce:	2301      	movs	r3, #1
 80031d0:	e00f      	b.n	80031f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <SysTick_Config+0x40>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031da:	210f      	movs	r1, #15
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295
 80031e0:	f7ff ff8e 	bl	8003100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <SysTick_Config+0x40>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <SysTick_Config+0x40>)
 80031ec:	2207      	movs	r2, #7
 80031ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	e000e010 	.word	0xe000e010

08003200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff29 	bl	8003060 <__NVIC_SetPriorityGrouping>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003228:	f7ff ff3e 	bl	80030a8 <__NVIC_GetPriorityGrouping>
 800322c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	6978      	ldr	r0, [r7, #20]
 8003234:	f7ff ff8e 	bl	8003154 <NVIC_EncodePriority>
 8003238:	4602      	mov	r2, r0
 800323a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff5d 	bl	8003100 <__NVIC_SetPriority>
}
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff31 	bl	80030c4 <__NVIC_EnableIRQ>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ffa2 	bl	80031bc <SysTick_Config>
 8003278:	4603      	mov	r3, r0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	e165      	b.n	800356c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032a0:	2201      	movs	r2, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	f040 8154 	bne.w	8003566 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d005      	beq.n	80032d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d130      	bne.n	8003338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	2203      	movs	r2, #3
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800330c:	2201      	movs	r2, #1
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 0201 	and.w	r2, r3, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	2b03      	cmp	r3, #3
 8003342:	d017      	beq.n	8003374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d123      	bne.n	80033c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	08da      	lsrs	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3208      	adds	r2, #8
 8003388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	220f      	movs	r2, #15
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	08da      	lsrs	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3208      	adds	r2, #8
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0203 	and.w	r2, r3, #3
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80ae 	beq.w	8003566 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b5d      	ldr	r3, [pc, #372]	; (8003584 <HAL_GPIO_Init+0x300>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	4a5c      	ldr	r2, [pc, #368]	; (8003584 <HAL_GPIO_Init+0x300>)
 8003414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003418:	6453      	str	r3, [r2, #68]	; 0x44
 800341a:	4b5a      	ldr	r3, [pc, #360]	; (8003584 <HAL_GPIO_Init+0x300>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003426:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_GPIO_Init+0x304>)
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	220f      	movs	r2, #15
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4f      	ldr	r2, [pc, #316]	; (800358c <HAL_GPIO_Init+0x308>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d025      	beq.n	800349e <HAL_GPIO_Init+0x21a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a4e      	ldr	r2, [pc, #312]	; (8003590 <HAL_GPIO_Init+0x30c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01f      	beq.n	800349a <HAL_GPIO_Init+0x216>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a4d      	ldr	r2, [pc, #308]	; (8003594 <HAL_GPIO_Init+0x310>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d019      	beq.n	8003496 <HAL_GPIO_Init+0x212>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a4c      	ldr	r2, [pc, #304]	; (8003598 <HAL_GPIO_Init+0x314>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_GPIO_Init+0x20e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a4b      	ldr	r2, [pc, #300]	; (800359c <HAL_GPIO_Init+0x318>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00d      	beq.n	800348e <HAL_GPIO_Init+0x20a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a4a      	ldr	r2, [pc, #296]	; (80035a0 <HAL_GPIO_Init+0x31c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <HAL_GPIO_Init+0x206>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a49      	ldr	r2, [pc, #292]	; (80035a4 <HAL_GPIO_Init+0x320>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_GPIO_Init+0x202>
 8003482:	2306      	movs	r3, #6
 8003484:	e00c      	b.n	80034a0 <HAL_GPIO_Init+0x21c>
 8003486:	2307      	movs	r3, #7
 8003488:	e00a      	b.n	80034a0 <HAL_GPIO_Init+0x21c>
 800348a:	2305      	movs	r3, #5
 800348c:	e008      	b.n	80034a0 <HAL_GPIO_Init+0x21c>
 800348e:	2304      	movs	r3, #4
 8003490:	e006      	b.n	80034a0 <HAL_GPIO_Init+0x21c>
 8003492:	2303      	movs	r3, #3
 8003494:	e004      	b.n	80034a0 <HAL_GPIO_Init+0x21c>
 8003496:	2302      	movs	r3, #2
 8003498:	e002      	b.n	80034a0 <HAL_GPIO_Init+0x21c>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_GPIO_Init+0x21c>
 800349e:	2300      	movs	r3, #0
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	f002 0203 	and.w	r2, r2, #3
 80034a6:	0092      	lsls	r2, r2, #2
 80034a8:	4093      	lsls	r3, r2
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034b0:	4935      	ldr	r1, [pc, #212]	; (8003588 <HAL_GPIO_Init+0x304>)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	3302      	adds	r3, #2
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034be:	4b3a      	ldr	r3, [pc, #232]	; (80035a8 <HAL_GPIO_Init+0x324>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e2:	4a31      	ldr	r2, [pc, #196]	; (80035a8 <HAL_GPIO_Init+0x324>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034e8:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_GPIO_Init+0x324>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800350c:	4a26      	ldr	r2, [pc, #152]	; (80035a8 <HAL_GPIO_Init+0x324>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003512:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_GPIO_Init+0x324>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003536:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <HAL_GPIO_Init+0x324>)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <HAL_GPIO_Init+0x324>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <HAL_GPIO_Init+0x324>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3301      	adds	r3, #1
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	f67f ae96 	bls.w	80032a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	3724      	adds	r7, #36	; 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	40013800 	.word	0x40013800
 800358c:	40020000 	.word	0x40020000
 8003590:	40020400 	.word	0x40020400
 8003594:	40020800 	.word	0x40020800
 8003598:	40020c00 	.word	0x40020c00
 800359c:	40021000 	.word	0x40021000
 80035a0:	40021400 	.word	0x40021400
 80035a4:	40021800 	.word	0x40021800
 80035a8:	40013c00 	.word	0x40013c00

080035ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
 80035b8:	4613      	mov	r3, r2
 80035ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035bc:	787b      	ldrb	r3, [r7, #1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035c8:	e003      	b.n	80035d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ca:	887b      	ldrh	r3, [r7, #2]
 80035cc:	041a      	lsls	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	619a      	str	r2, [r3, #24]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e12b      	b.n	800384a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fe f894 	bl	8001734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2224      	movs	r2, #36	; 0x24
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003644:	f001 f854 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8003648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4a81      	ldr	r2, [pc, #516]	; (8003854 <HAL_I2C_Init+0x274>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d807      	bhi.n	8003664 <HAL_I2C_Init+0x84>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a80      	ldr	r2, [pc, #512]	; (8003858 <HAL_I2C_Init+0x278>)
 8003658:	4293      	cmp	r3, r2
 800365a:	bf94      	ite	ls
 800365c:	2301      	movls	r3, #1
 800365e:	2300      	movhi	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e006      	b.n	8003672 <HAL_I2C_Init+0x92>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a7d      	ldr	r2, [pc, #500]	; (800385c <HAL_I2C_Init+0x27c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	bf94      	ite	ls
 800366c:	2301      	movls	r3, #1
 800366e:	2300      	movhi	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0e7      	b.n	800384a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a78      	ldr	r2, [pc, #480]	; (8003860 <HAL_I2C_Init+0x280>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0c9b      	lsrs	r3, r3, #18
 8003684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a6a      	ldr	r2, [pc, #424]	; (8003854 <HAL_I2C_Init+0x274>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d802      	bhi.n	80036b4 <HAL_I2C_Init+0xd4>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3301      	adds	r3, #1
 80036b2:	e009      	b.n	80036c8 <HAL_I2C_Init+0xe8>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	4a69      	ldr	r2, [pc, #420]	; (8003864 <HAL_I2C_Init+0x284>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	3301      	adds	r3, #1
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	495c      	ldr	r1, [pc, #368]	; (8003854 <HAL_I2C_Init+0x274>)
 80036e4:	428b      	cmp	r3, r1
 80036e6:	d819      	bhi.n	800371c <HAL_I2C_Init+0x13c>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1e59      	subs	r1, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f6:	1c59      	adds	r1, r3, #1
 80036f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036fc:	400b      	ands	r3, r1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_I2C_Init+0x138>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e59      	subs	r1, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003710:	3301      	adds	r3, #1
 8003712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003716:	e051      	b.n	80037bc <HAL_I2C_Init+0x1dc>
 8003718:	2304      	movs	r3, #4
 800371a:	e04f      	b.n	80037bc <HAL_I2C_Init+0x1dc>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d111      	bne.n	8003748 <HAL_I2C_Init+0x168>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e58      	subs	r0, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e012      	b.n	800376e <HAL_I2C_Init+0x18e>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1e58      	subs	r0, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	0099      	lsls	r1, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	fbb0 f3f3 	udiv	r3, r0, r3
 800375e:	3301      	adds	r3, #1
 8003760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Init+0x196>
 8003772:	2301      	movs	r3, #1
 8003774:	e022      	b.n	80037bc <HAL_I2C_Init+0x1dc>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10e      	bne.n	800379c <HAL_I2C_Init+0x1bc>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1e58      	subs	r0, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6859      	ldr	r1, [r3, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	440b      	add	r3, r1
 800378c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003790:	3301      	adds	r3, #1
 8003792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379a:	e00f      	b.n	80037bc <HAL_I2C_Init+0x1dc>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e58      	subs	r0, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	0099      	lsls	r1, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	6809      	ldr	r1, [r1, #0]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6911      	ldr	r1, [r2, #16]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68d2      	ldr	r2, [r2, #12]
 80037f6:	4311      	orrs	r1, r2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	000186a0 	.word	0x000186a0
 8003858:	001e847f 	.word	0x001e847f
 800385c:	003d08ff 	.word	0x003d08ff
 8003860:	431bde83 	.word	0x431bde83
 8003864:	10624dd3 	.word	0x10624dd3

08003868 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	461a      	mov	r2, r3
 8003874:	460b      	mov	r3, r1
 8003876:	817b      	strh	r3, [r7, #10]
 8003878:	4613      	mov	r3, r2
 800387a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7fe fd1e 	bl	80022bc <HAL_GetTick>
 8003880:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b20      	cmp	r3, #32
 800388c:	f040 80e0 	bne.w	8003a50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2319      	movs	r3, #25
 8003896:	2201      	movs	r2, #1
 8003898:	4970      	ldr	r1, [pc, #448]	; (8003a5c <HAL_I2C_Master_Transmit+0x1f4>)
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fc58 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
 80038a8:	e0d3      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_I2C_Master_Transmit+0x50>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e0cc      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x1ea>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d007      	beq.n	80038de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2221      	movs	r2, #33	; 0x21
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2210      	movs	r2, #16
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	893a      	ldrh	r2, [r7, #8]
 800390e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a50      	ldr	r2, [pc, #320]	; (8003a60 <HAL_I2C_Master_Transmit+0x1f8>)
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003920:	8979      	ldrh	r1, [r7, #10]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	6a3a      	ldr	r2, [r7, #32]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fac2 	bl	8003eb0 <I2C_MasterRequestWrite>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e08d      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800394c:	e066      	b.n	8003a1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fcd2 	bl	80042fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	2b04      	cmp	r3, #4
 8003964:	d107      	bne.n	8003976 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003974:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e06b      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	781a      	ldrb	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d11b      	bne.n	80039f0 <HAL_I2C_Master_Transmit+0x188>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d017      	beq.n	80039f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	6a39      	ldr	r1, [r7, #32]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fcc2 	bl	800437e <I2C_WaitOnBTFFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d107      	bne.n	8003a18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e01a      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d194      	bne.n	800394e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
  }
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	00100002 	.word	0x00100002
 8003a60:	ffff0000 	.word	0xffff0000

08003a64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08c      	sub	sp, #48	; 0x30
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	460b      	mov	r3, r1
 8003a72:	817b      	strh	r3, [r7, #10]
 8003a74:	4613      	mov	r3, r2
 8003a76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7fe fc20 	bl	80022bc <HAL_GetTick>
 8003a7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	f040 820b 	bne.w	8003ea2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2319      	movs	r3, #25
 8003a92:	2201      	movs	r2, #1
 8003a94:	497c      	ldr	r1, [pc, #496]	; (8003c88 <HAL_I2C_Master_Receive+0x224>)
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fb5a 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e1fe      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_I2C_Master_Receive+0x50>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e1f7      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d007      	beq.n	8003ada <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2222      	movs	r2, #34	; 0x22
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2210      	movs	r2, #16
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	893a      	ldrh	r2, [r7, #8]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_I2C_Master_Receive+0x228>)
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b1c:	8979      	ldrh	r1, [r7, #10]
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fa46 	bl	8003fb4 <I2C_MasterRequestRead>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1b8      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d113      	bne.n	8003b62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	623b      	str	r3, [r7, #32]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e18c      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d11b      	bne.n	8003ba2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e16c      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d11b      	bne.n	8003be2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	e14c      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c08:	e138      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	f200 80f1 	bhi.w	8003df6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d123      	bne.n	8003c64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fbed 	bl	8004400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e139      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c62:	e10b      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d14e      	bne.n	8003d0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	2200      	movs	r2, #0
 8003c74:	4906      	ldr	r1, [pc, #24]	; (8003c90 <HAL_I2C_Master_Receive+0x22c>)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fa6a 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e10e      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
 8003c86:	bf00      	nop
 8003c88:	00100002 	.word	0x00100002
 8003c8c:	ffff0000 	.word	0xffff0000
 8003c90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d08:	e0b8      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	2200      	movs	r2, #0
 8003d12:	4966      	ldr	r1, [pc, #408]	; (8003eac <HAL_I2C_Master_Receive+0x448>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fa1b 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0bf      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	494f      	ldr	r1, [pc, #316]	; (8003eac <HAL_I2C_Master_Receive+0x448>)
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f9ed 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e091      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003df4:	e042      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fb00 	bl	8004400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e04c      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d118      	bne.n	8003e7c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f aec2 	bne.w	8003c0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e000      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	00010004 	.word	0x00010004

08003eb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d006      	beq.n	8003eda <I2C_MasterRequestWrite+0x2a>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d003      	beq.n	8003eda <I2C_MasterRequestWrite+0x2a>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ed8:	d108      	bne.n	8003eec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e00b      	b.n	8003f04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	2b12      	cmp	r3, #18
 8003ef2:	d107      	bne.n	8003f04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f91d 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2a:	d103      	bne.n	8003f34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e035      	b.n	8003fa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f40:	d108      	bne.n	8003f54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f42:	897b      	ldrh	r3, [r7, #10]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f50:	611a      	str	r2, [r3, #16]
 8003f52:	e01b      	b.n	8003f8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f54:	897b      	ldrh	r3, [r7, #10]
 8003f56:	11db      	asrs	r3, r3, #7
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f003 0306 	and.w	r3, r3, #6
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f063 030f 	orn	r3, r3, #15
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	490e      	ldr	r1, [pc, #56]	; (8003fac <I2C_MasterRequestWrite+0xfc>)
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f943 	bl	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e010      	b.n	8003fa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4907      	ldr	r1, [pc, #28]	; (8003fb0 <I2C_MasterRequestWrite+0x100>)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f933 	bl	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	00010008 	.word	0x00010008
 8003fb0:	00010002 	.word	0x00010002

08003fb4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d006      	beq.n	8003fee <I2C_MasterRequestRead+0x3a>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d003      	beq.n	8003fee <I2C_MasterRequestRead+0x3a>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fec:	d108      	bne.n	8004000 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e00b      	b.n	8004018 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	2b11      	cmp	r3, #17
 8004006:	d107      	bne.n	8004018 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f893 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403e:	d103      	bne.n	8004048 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e079      	b.n	8004140 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004054:	d108      	bne.n	8004068 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004056:	897b      	ldrh	r3, [r7, #10]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	b2da      	uxtb	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	e05f      	b.n	8004128 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004068:	897b      	ldrh	r3, [r7, #10]
 800406a:	11db      	asrs	r3, r3, #7
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0306 	and.w	r3, r3, #6
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f063 030f 	orn	r3, r3, #15
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4930      	ldr	r1, [pc, #192]	; (8004148 <I2C_MasterRequestRead+0x194>)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f8b9 	bl	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e054      	b.n	8004140 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004096:	897b      	ldrh	r3, [r7, #10]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4929      	ldr	r1, [pc, #164]	; (800414c <I2C_MasterRequestRead+0x198>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f8a9 	bl	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e044      	b.n	8004140 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f831 	bl	8004150 <I2C_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00d      	beq.n	8004110 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004102:	d103      	bne.n	800410c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800410a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e017      	b.n	8004140 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004110:	897b      	ldrh	r3, [r7, #10]
 8004112:	11db      	asrs	r3, r3, #7
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f003 0306 	and.w	r3, r3, #6
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f063 030e 	orn	r3, r3, #14
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4907      	ldr	r1, [pc, #28]	; (800414c <I2C_MasterRequestRead+0x198>)
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f865 	bl	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	00010008 	.word	0x00010008
 800414c:	00010002 	.word	0x00010002

08004150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004160:	e025      	b.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d021      	beq.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7fe f8a7 	bl	80022bc <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d116      	bne.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e023      	b.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10d      	bne.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4013      	ands	r3, r2
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	e00c      	b.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4013      	ands	r3, r2
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d0b6      	beq.n	8004162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800420c:	e051      	b.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421c:	d123      	bne.n	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004236:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f043 0204 	orr.w	r2, r3, #4
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e046      	b.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d021      	beq.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fe f825 	bl	80022bc <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d116      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e020      	b.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d10c      	bne.n	80042d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	e00b      	b.n	80042ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	43da      	mvns	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4013      	ands	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d18d      	bne.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004308:	e02d      	b.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f8ce 	bl	80044ac <I2C_IsAcknowledgeFailed>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e02d      	b.n	8004376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d021      	beq.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fd ffcb 	bl	80022bc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d116      	bne.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e007      	b.n	8004376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d1ca      	bne.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800438a:	e02d      	b.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f88d 	bl	80044ac <I2C_IsAcknowledgeFailed>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e02d      	b.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	d021      	beq.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a4:	f7fd ff8a 	bl	80022bc <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d302      	bcc.n	80043ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d116      	bne.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e007      	b.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d1ca      	bne.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800440c:	e042      	b.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b10      	cmp	r3, #16
 800441a:	d119      	bne.n	8004450 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0210 	mvn.w	r2, #16
 8004424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e029      	b.n	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004450:	f7fd ff34 	bl	80022bc <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	d302      	bcc.n	8004466 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e007      	b.n	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d1b5      	bne.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c2:	d11b      	bne.n	80044fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	f043 0204 	orr.w	r2, r3, #4
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0cc      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004520:	4b68      	ldr	r3, [pc, #416]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d90c      	bls.n	8004548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b65      	ldr	r3, [pc, #404]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004536:	4b63      	ldr	r3, [pc, #396]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0b8      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004560:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a58      	ldr	r2, [pc, #352]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800456a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004578:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a52      	ldr	r2, [pc, #328]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004584:	4b50      	ldr	r3, [pc, #320]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	494d      	ldr	r1, [pc, #308]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d044      	beq.n	800462c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d119      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e07f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d003      	beq.n	80045ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ca:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e06f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045da:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e067      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ea:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f023 0203 	bic.w	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4934      	ldr	r1, [pc, #208]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045fc:	f7fd fe5e 	bl	80022bc <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	e00a      	b.n	800461a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004604:	f7fd fe5a 	bl	80022bc <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e04f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 020c 	and.w	r2, r3, #12
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	429a      	cmp	r2, r3
 800462a:	d1eb      	bne.n	8004604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d20c      	bcs.n	8004654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463a:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e032      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4916      	ldr	r1, [pc, #88]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	490e      	ldr	r1, [pc, #56]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004692:	f000 f841 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 8004696:	4602      	mov	r2, r0
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	490a      	ldr	r1, [pc, #40]	; (80046cc <HAL_RCC_ClockConfig+0x1c0>)
 80046a4:	5ccb      	ldrb	r3, [r1, r3]
 80046a6:	fa22 f303 	lsr.w	r3, r2, r3
 80046aa:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_RCC_ClockConfig+0x1c8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fd fdbe 	bl	8002234 <HAL_InitTick>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023c00 	.word	0x40023c00
 80046c8:	40023800 	.word	0x40023800
 80046cc:	080069b0 	.word	0x080069b0
 80046d0:	20000004 	.word	0x20000004
 80046d4:	20000008 	.word	0x20000008

080046d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_RCC_GetHCLKFreq+0x14>)
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000004 	.word	0x20000004

080046f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046f4:	f7ff fff0 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	0a9b      	lsrs	r3, r3, #10
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4903      	ldr	r1, [pc, #12]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40023800 	.word	0x40023800
 8004714:	080069c0 	.word	0x080069c0

08004718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800471c:	b088      	sub	sp, #32
 800471e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004734:	4bce      	ldr	r3, [pc, #824]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b0c      	cmp	r3, #12
 800473e:	f200 818d 	bhi.w	8004a5c <HAL_RCC_GetSysClockFreq+0x344>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <HAL_RCC_GetSysClockFreq+0x30>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	0800477d 	.word	0x0800477d
 800474c:	08004a5d 	.word	0x08004a5d
 8004750:	08004a5d 	.word	0x08004a5d
 8004754:	08004a5d 	.word	0x08004a5d
 8004758:	08004783 	.word	0x08004783
 800475c:	08004a5d 	.word	0x08004a5d
 8004760:	08004a5d 	.word	0x08004a5d
 8004764:	08004a5d 	.word	0x08004a5d
 8004768:	08004789 	.word	0x08004789
 800476c:	08004a5d 	.word	0x08004a5d
 8004770:	08004a5d 	.word	0x08004a5d
 8004774:	08004a5d 	.word	0x08004a5d
 8004778:	080048fd 	.word	0x080048fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4bbd      	ldr	r3, [pc, #756]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x35c>)
 800477e:	61bb      	str	r3, [r7, #24]
       break;
 8004780:	e16f      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004782:	4bbd      	ldr	r3, [pc, #756]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x360>)
 8004784:	61bb      	str	r3, [r7, #24]
      break;
 8004786:	e16c      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004788:	4bb9      	ldr	r3, [pc, #740]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004790:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004792:	4bb7      	ldr	r3, [pc, #732]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d053      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479e:	4bb4      	ldr	r3, [pc, #720]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	461a      	mov	r2, r3
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	ea02 0400 	and.w	r4, r2, r0
 80047b6:	603c      	str	r4, [r7, #0]
 80047b8:	400b      	ands	r3, r1
 80047ba:	607b      	str	r3, [r7, #4]
 80047bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047c0:	4620      	mov	r0, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	014b      	lsls	r3, r1, #5
 80047ce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047d2:	0142      	lsls	r2, r0, #5
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	4623      	mov	r3, r4
 80047da:	1ac0      	subs	r0, r0, r3
 80047dc:	462b      	mov	r3, r5
 80047de:	eb61 0103 	sbc.w	r1, r1, r3
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	018b      	lsls	r3, r1, #6
 80047ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047f0:	0182      	lsls	r2, r0, #6
 80047f2:	1a12      	subs	r2, r2, r0
 80047f4:	eb63 0301 	sbc.w	r3, r3, r1
 80047f8:	f04f 0000 	mov.w	r0, #0
 80047fc:	f04f 0100 	mov.w	r1, #0
 8004800:	00d9      	lsls	r1, r3, #3
 8004802:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004806:	00d0      	lsls	r0, r2, #3
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4621      	mov	r1, r4
 800480e:	1852      	adds	r2, r2, r1
 8004810:	4629      	mov	r1, r5
 8004812:	eb43 0101 	adc.w	r1, r3, r1
 8004816:	460b      	mov	r3, r1
 8004818:	f04f 0000 	mov.w	r0, #0
 800481c:	f04f 0100 	mov.w	r1, #0
 8004820:	0259      	lsls	r1, r3, #9
 8004822:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004826:	0250      	lsls	r0, r2, #9
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	461a      	mov	r2, r3
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	f7fc f9ca 	bl	8000bd0 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4613      	mov	r3, r2
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	e04c      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	4b8a      	ldr	r3, [pc, #552]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	461a      	mov	r2, r3
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	ea02 0a00 	and.w	sl, r2, r0
 800485e:	ea03 0b01 	and.w	fp, r3, r1
 8004862:	4650      	mov	r0, sl
 8004864:	4659      	mov	r1, fp
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	014b      	lsls	r3, r1, #5
 8004870:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004874:	0142      	lsls	r2, r0, #5
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	ebb0 000a 	subs.w	r0, r0, sl
 800487e:	eb61 010b 	sbc.w	r1, r1, fp
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	018b      	lsls	r3, r1, #6
 800488c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004890:	0182      	lsls	r2, r0, #6
 8004892:	1a12      	subs	r2, r2, r0
 8004894:	eb63 0301 	sbc.w	r3, r3, r1
 8004898:	f04f 0000 	mov.w	r0, #0
 800489c:	f04f 0100 	mov.w	r1, #0
 80048a0:	00d9      	lsls	r1, r3, #3
 80048a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048a6:	00d0      	lsls	r0, r2, #3
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	eb12 020a 	adds.w	r2, r2, sl
 80048b0:	eb43 030b 	adc.w	r3, r3, fp
 80048b4:	f04f 0000 	mov.w	r0, #0
 80048b8:	f04f 0100 	mov.w	r1, #0
 80048bc:	0299      	lsls	r1, r3, #10
 80048be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048c2:	0290      	lsls	r0, r2, #10
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	f7fc f97c 	bl	8000bd0 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4613      	mov	r3, r2
 80048de:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048e0:	4b63      	ldr	r3, [pc, #396]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	3301      	adds	r3, #1
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	61bb      	str	r3, [r7, #24]
      break;
 80048fa:	e0b2      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048fc:	4b5c      	ldr	r3, [pc, #368]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004904:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004906:	4b5a      	ldr	r3, [pc, #360]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d04d      	beq.n	80049ae <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004912:	4b57      	ldr	r3, [pc, #348]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	461a      	mov	r2, r3
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004922:	f04f 0100 	mov.w	r1, #0
 8004926:	ea02 0800 	and.w	r8, r2, r0
 800492a:	ea03 0901 	and.w	r9, r3, r1
 800492e:	4640      	mov	r0, r8
 8004930:	4649      	mov	r1, r9
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	014b      	lsls	r3, r1, #5
 800493c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004940:	0142      	lsls	r2, r0, #5
 8004942:	4610      	mov	r0, r2
 8004944:	4619      	mov	r1, r3
 8004946:	ebb0 0008 	subs.w	r0, r0, r8
 800494a:	eb61 0109 	sbc.w	r1, r1, r9
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	018b      	lsls	r3, r1, #6
 8004958:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800495c:	0182      	lsls	r2, r0, #6
 800495e:	1a12      	subs	r2, r2, r0
 8004960:	eb63 0301 	sbc.w	r3, r3, r1
 8004964:	f04f 0000 	mov.w	r0, #0
 8004968:	f04f 0100 	mov.w	r1, #0
 800496c:	00d9      	lsls	r1, r3, #3
 800496e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004972:	00d0      	lsls	r0, r2, #3
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	eb12 0208 	adds.w	r2, r2, r8
 800497c:	eb43 0309 	adc.w	r3, r3, r9
 8004980:	f04f 0000 	mov.w	r0, #0
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	0259      	lsls	r1, r3, #9
 800498a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800498e:	0250      	lsls	r0, r2, #9
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	461a      	mov	r2, r3
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	f7fc f916 	bl	8000bd0 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4613      	mov	r3, r2
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	e04a      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ae:	4b30      	ldr	r3, [pc, #192]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	099b      	lsrs	r3, r3, #6
 80049b4:	461a      	mov	r2, r3
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	ea02 0400 	and.w	r4, r2, r0
 80049c6:	ea03 0501 	and.w	r5, r3, r1
 80049ca:	4620      	mov	r0, r4
 80049cc:	4629      	mov	r1, r5
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	014b      	lsls	r3, r1, #5
 80049d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049dc:	0142      	lsls	r2, r0, #5
 80049de:	4610      	mov	r0, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	1b00      	subs	r0, r0, r4
 80049e4:	eb61 0105 	sbc.w	r1, r1, r5
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	018b      	lsls	r3, r1, #6
 80049f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049f6:	0182      	lsls	r2, r0, #6
 80049f8:	1a12      	subs	r2, r2, r0
 80049fa:	eb63 0301 	sbc.w	r3, r3, r1
 80049fe:	f04f 0000 	mov.w	r0, #0
 8004a02:	f04f 0100 	mov.w	r1, #0
 8004a06:	00d9      	lsls	r1, r3, #3
 8004a08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a0c:	00d0      	lsls	r0, r2, #3
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	1912      	adds	r2, r2, r4
 8004a14:	eb45 0303 	adc.w	r3, r5, r3
 8004a18:	f04f 0000 	mov.w	r0, #0
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	0299      	lsls	r1, r3, #10
 8004a22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a26:	0290      	lsls	r0, r2, #10
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	f7fc f8ca 	bl	8000bd0 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4613      	mov	r3, r2
 8004a42:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	0f1b      	lsrs	r3, r3, #28
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	61bb      	str	r3, [r7, #24]
      break;
 8004a5a:	e002      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a5e:	61bb      	str	r3, [r7, #24]
      break;
 8004a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a62:	69bb      	ldr	r3, [r7, #24]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	00f42400 	.word	0x00f42400
 8004a78:	007a1200 	.word	0x007a1200

08004a7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e28d      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8083 	beq.w	8004ba2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a9c:	4b94      	ldr	r3, [pc, #592]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d019      	beq.n	8004adc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004aa8:	4b91      	ldr	r3, [pc, #580]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ab4:	4b8e      	ldr	r3, [pc, #568]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac0:	d00c      	beq.n	8004adc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac2:	4b8b      	ldr	r3, [pc, #556]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004aca:	2b0c      	cmp	r3, #12
 8004acc:	d112      	bne.n	8004af4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ace:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ada:	d10b      	bne.n	8004af4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	4b84      	ldr	r3, [pc, #528]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d05b      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x124>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d157      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e25a      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afc:	d106      	bne.n	8004b0c <HAL_RCC_OscConfig+0x90>
 8004afe:	4b7c      	ldr	r3, [pc, #496]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7b      	ldr	r2, [pc, #492]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e01d      	b.n	8004b48 <HAL_RCC_OscConfig+0xcc>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0xb4>
 8004b16:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a75      	ldr	r2, [pc, #468]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	4b73      	ldr	r3, [pc, #460]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a72      	ldr	r2, [pc, #456]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCC_OscConfig+0xcc>
 8004b30:	4b6f      	ldr	r3, [pc, #444]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a6e      	ldr	r2, [pc, #440]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	4b6c      	ldr	r3, [pc, #432]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a6b      	ldr	r2, [pc, #428]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d013      	beq.n	8004b78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fd fbb4 	bl	80022bc <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b58:	f7fd fbb0 	bl	80022bc <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	; 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e21f      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	4b61      	ldr	r3, [pc, #388]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0xdc>
 8004b76:	e014      	b.n	8004ba2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fd fba0 	bl	80022bc <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b80:	f7fd fb9c 	bl	80022bc <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	; 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e20b      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	4b57      	ldr	r3, [pc, #348]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x104>
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d06f      	beq.n	8004c8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004bae:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d017      	beq.n	8004bea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bba:	4b4d      	ldr	r3, [pc, #308]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d105      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bc6:	4b4a      	ldr	r3, [pc, #296]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d11c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bde:	4b44      	ldr	r3, [pc, #272]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d116      	bne.n	8004c18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bea:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_RCC_OscConfig+0x186>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e1d3      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4937      	ldr	r1, [pc, #220]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c16:	e03a      	b.n	8004c8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c20:	4b34      	ldr	r3, [pc, #208]	; (8004cf4 <HAL_RCC_OscConfig+0x278>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c26:	f7fd fb49 	bl	80022bc <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2e:	f7fd fb45 	bl	80022bc <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e1b4      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4925      	ldr	r1, [pc, #148]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]
 8004c60:	e015      	b.n	8004c8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x278>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fd fb28 	bl	80022bc <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c70:	f7fd fb24 	bl	80022bc <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e193      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c82:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d036      	beq.n	8004d08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fd fb08 	bl	80022bc <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb0:	f7fd fb04 	bl	80022bc <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e173      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x234>
 8004cce:	e01b      	b.n	8004d08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd0:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_OscConfig+0x27c>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fd faf1 	bl	80022bc <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cdc:	e00e      	b.n	8004cfc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fd faed 	bl	80022bc <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d907      	bls.n	8004cfc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e15c      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	42470000 	.word	0x42470000
 8004cf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	4b8a      	ldr	r3, [pc, #552]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ea      	bne.n	8004cde <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8097 	beq.w	8004e44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1a:	4b83      	ldr	r3, [pc, #524]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	4b7f      	ldr	r3, [pc, #508]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a7e      	ldr	r2, [pc, #504]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b7c      	ldr	r3, [pc, #496]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b79      	ldr	r3, [pc, #484]	; (8004f2c <HAL_RCC_OscConfig+0x4b0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d118      	bne.n	8004d84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d52:	4b76      	ldr	r3, [pc, #472]	; (8004f2c <HAL_RCC_OscConfig+0x4b0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a75      	ldr	r2, [pc, #468]	; (8004f2c <HAL_RCC_OscConfig+0x4b0>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd faad 	bl	80022bc <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d66:	f7fd faa9 	bl	80022bc <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e118      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	4b6c      	ldr	r3, [pc, #432]	; (8004f2c <HAL_RCC_OscConfig+0x4b0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCC_OscConfig+0x31e>
 8004d8c:	4b66      	ldr	r3, [pc, #408]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	4a65      	ldr	r2, [pc, #404]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6713      	str	r3, [r2, #112]	; 0x70
 8004d98:	e01c      	b.n	8004dd4 <HAL_RCC_OscConfig+0x358>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x340>
 8004da2:	4b61      	ldr	r3, [pc, #388]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	4a60      	ldr	r2, [pc, #384]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004da8:	f043 0304 	orr.w	r3, r3, #4
 8004dac:	6713      	str	r3, [r2, #112]	; 0x70
 8004dae:	4b5e      	ldr	r3, [pc, #376]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a5d      	ldr	r2, [pc, #372]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x358>
 8004dbc:	4b5a      	ldr	r3, [pc, #360]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a59      	ldr	r2, [pc, #356]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc8:	4b57      	ldr	r3, [pc, #348]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	4a56      	ldr	r2, [pc, #344]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004dce:	f023 0304 	bic.w	r3, r3, #4
 8004dd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fd fa6e 	bl	80022bc <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fd fa6a 	bl	80022bc <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e0d7      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfa:	4b4b      	ldr	r3, [pc, #300]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0ee      	beq.n	8004de4 <HAL_RCC_OscConfig+0x368>
 8004e06:	e014      	b.n	8004e32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fd fa58 	bl	80022bc <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fd fa54 	bl	80022bc <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e0c1      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e26:	4b40      	ldr	r3, [pc, #256]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1ee      	bne.n	8004e10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d105      	bne.n	8004e44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e38:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	4a3a      	ldr	r2, [pc, #232]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 80ad 	beq.w	8004fa8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e4e:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d060      	beq.n	8004f1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d145      	bne.n	8004eee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e62:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <HAL_RCC_OscConfig+0x4b4>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd fa28 	bl	80022bc <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd fa24 	bl	80022bc <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e093      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	019b      	lsls	r3, r3, #6
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	071b      	lsls	r3, r3, #28
 8004eba:	491b      	ldr	r1, [pc, #108]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_RCC_OscConfig+0x4b4>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fd f9f9 	bl	80022bc <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ece:	f7fd f9f5 	bl	80022bc <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e064      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x452>
 8004eec:	e05c      	b.n	8004fa8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eee:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <HAL_RCC_OscConfig+0x4b4>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fd f9e2 	bl	80022bc <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fd f9de 	bl	80022bc <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e04d      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <HAL_RCC_OscConfig+0x4ac>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x480>
 8004f1a:	e045      	b.n	8004fa8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d107      	bne.n	8004f34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e040      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	40007000 	.word	0x40007000
 8004f30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f34:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <HAL_RCC_OscConfig+0x538>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d030      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d129      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d122      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f64:	4013      	ands	r3, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d119      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d10f      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800

08004fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e07b      	b.n	80050c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d108      	bne.n	8004fe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fda:	d009      	beq.n	8004ff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	61da      	str	r2, [r3, #28]
 8004fe2:	e005      	b.n	8004ff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fc fbda 	bl	80017c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005026:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005074:	ea42 0103 	orr.w	r1, r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	f003 0104 	and.w	r1, r3, #4
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f003 0210 	and.w	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b08c      	sub	sp, #48	; 0x30
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
 80050d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050d8:	2301      	movs	r3, #1
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x26>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e18a      	b.n	8005406 <HAL_SPI_TransmitReceive+0x33c>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f8:	f7fd f8e0 	bl	80022bc <HAL_GetTick>
 80050fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005116:	2b01      	cmp	r3, #1
 8005118:	d00f      	beq.n	800513a <HAL_SPI_TransmitReceive+0x70>
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005120:	d107      	bne.n	8005132 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d103      	bne.n	8005132 <HAL_SPI_TransmitReceive+0x68>
 800512a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800512e:	2b04      	cmp	r3, #4
 8005130:	d003      	beq.n	800513a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005132:	2302      	movs	r3, #2
 8005134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005138:	e15b      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_SPI_TransmitReceive+0x82>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_SPI_TransmitReceive+0x82>
 8005146:	887b      	ldrh	r3, [r7, #2]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d103      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005152:	e14e      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b04      	cmp	r3, #4
 800515e:	d003      	beq.n	8005168 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2205      	movs	r2, #5
 8005164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	887a      	ldrh	r2, [r7, #2]
 8005178:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	887a      	ldrh	r2, [r7, #2]
 800517e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	887a      	ldrh	r2, [r7, #2]
 800518a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	887a      	ldrh	r2, [r7, #2]
 8005190:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d007      	beq.n	80051bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c4:	d178      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_SPI_TransmitReceive+0x10a>
 80051ce:	8b7b      	ldrh	r3, [r7, #26]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d166      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	881a      	ldrh	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f8:	e053      	b.n	80052a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b02      	cmp	r3, #2
 8005206:	d11b      	bne.n	8005240 <HAL_SPI_TransmitReceive+0x176>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d016      	beq.n	8005240 <HAL_SPI_TransmitReceive+0x176>
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d113      	bne.n	8005240 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	881a      	ldrh	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b01      	cmp	r3, #1
 800524c:	d119      	bne.n	8005282 <HAL_SPI_TransmitReceive+0x1b8>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d014      	beq.n	8005282 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	b292      	uxth	r2, r2
 8005264:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800527e:	2301      	movs	r3, #1
 8005280:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005282:	f7fd f81b 	bl	80022bc <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800528e:	429a      	cmp	r2, r3
 8005290:	d807      	bhi.n	80052a2 <HAL_SPI_TransmitReceive+0x1d8>
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d003      	beq.n	80052a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052a0:	e0a7      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1a6      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x130>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1a1      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x130>
 80052b6:	e07c      	b.n	80053b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x1fc>
 80052c0:	8b7b      	ldrh	r3, [r7, #26]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d16b      	bne.n	800539e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	7812      	ldrb	r2, [r2, #0]
 80052d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ec:	e057      	b.n	800539e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d11c      	bne.n	8005336 <HAL_SPI_TransmitReceive+0x26c>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d017      	beq.n	8005336 <HAL_SPI_TransmitReceive+0x26c>
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	2b01      	cmp	r3, #1
 800530a:	d114      	bne.n	8005336 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	330c      	adds	r3, #12
 8005316:	7812      	ldrb	r2, [r2, #0]
 8005318:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b01      	cmp	r3, #1
 8005342:	d119      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x2ae>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d014      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005374:	2301      	movs	r3, #1
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005378:	f7fc ffa0 	bl	80022bc <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005384:	429a      	cmp	r2, r3
 8005386:	d803      	bhi.n	8005390 <HAL_SPI_TransmitReceive+0x2c6>
 8005388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d102      	bne.n	8005396 <HAL_SPI_TransmitReceive+0x2cc>
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800539c:	e029      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1a2      	bne.n	80052ee <HAL_SPI_TransmitReceive+0x224>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d19d      	bne.n	80052ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f8b2 	bl	8005520 <SPI_EndRxTxTransaction>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053ce:	e010      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10b      	bne.n	80053f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	e000      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005402:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005406:	4618      	mov	r0, r3
 8005408:	3730      	adds	r7, #48	; 0x30
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005420:	f7fc ff4c 	bl	80022bc <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	4413      	add	r3, r2
 800542e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005430:	f7fc ff44 	bl	80022bc <HAL_GetTick>
 8005434:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005436:	4b39      	ldr	r3, [pc, #228]	; (800551c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	015b      	lsls	r3, r3, #5
 800543c:	0d1b      	lsrs	r3, r3, #20
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005446:	e054      	b.n	80054f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d050      	beq.n	80054f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005450:	f7fc ff34 	bl	80022bc <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	429a      	cmp	r2, r3
 800545e:	d902      	bls.n	8005466 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d13d      	bne.n	80054e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005474:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800547e:	d111      	bne.n	80054a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005488:	d004      	beq.n	8005494 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005492:	d107      	bne.n	80054a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ac:	d10f      	bne.n	80054ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e017      	b.n	8005512 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4013      	ands	r3, r2
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	429a      	cmp	r2, r3
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	429a      	cmp	r2, r3
 800550e:	d19b      	bne.n	8005448 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000004 	.word	0x20000004

08005520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800552c:	4b1b      	ldr	r3, [pc, #108]	; (800559c <SPI_EndRxTxTransaction+0x7c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <SPI_EndRxTxTransaction+0x80>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	0d5b      	lsrs	r3, r3, #21
 8005538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800553c:	fb02 f303 	mul.w	r3, r2, r3
 8005540:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800554a:	d112      	bne.n	8005572 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2200      	movs	r2, #0
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f7ff ff5a 	bl	8005410 <SPI_WaitFlagStateUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e00f      	b.n	8005592 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3b01      	subs	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005588:	2b80      	cmp	r3, #128	; 0x80
 800558a:	d0f2      	beq.n	8005572 <SPI_EndRxTxTransaction+0x52>
 800558c:	e000      	b.n	8005590 <SPI_EndRxTxTransaction+0x70>
        break;
 800558e:	bf00      	nop
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000004 	.word	0x20000004
 80055a0:	165e9f81 	.word	0x165e9f81

080055a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e041      	b.n	800563a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fc f942 	bl	8001854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3304      	adds	r3, #4
 80055e0:	4619      	mov	r1, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	f000 fca8 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d001      	beq.n	800565c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e04e      	b.n	80056fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a23      	ldr	r2, [pc, #140]	; (8005708 <HAL_TIM_Base_Start_IT+0xc4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d022      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005686:	d01d      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <HAL_TIM_Base_Start_IT+0xc8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d018      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <HAL_TIM_Base_Start_IT+0xcc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <HAL_TIM_Base_Start_IT+0xd0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00e      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1b      	ldr	r2, [pc, #108]	; (8005718 <HAL_TIM_Base_Start_IT+0xd4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a19      	ldr	r2, [pc, #100]	; (800571c <HAL_TIM_Base_Start_IT+0xd8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d004      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x80>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a18      	ldr	r2, [pc, #96]	; (8005720 <HAL_TIM_Base_Start_IT+0xdc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d111      	bne.n	80056e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	d010      	beq.n	80056f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0201 	orr.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e6:	e007      	b.n	80056f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800
 8005714:	40000c00 	.word	0x40000c00
 8005718:	40010400 	.word	0x40010400
 800571c:	40014000 	.word	0x40014000
 8005720:	40001800 	.word	0x40001800

08005724 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e041      	b.n	80057ba <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f839 	bl	80057c2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f000 fbe8 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e041      	b.n	800586c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fc f895 	bl	800192c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 fb8f 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d109      	bne.n	8005898 <HAL_TIM_PWM_Start+0x24>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	bf14      	ite	ne
 8005890:	2301      	movne	r3, #1
 8005892:	2300      	moveq	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	e022      	b.n	80058de <HAL_TIM_PWM_Start+0x6a>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b04      	cmp	r3, #4
 800589c:	d109      	bne.n	80058b2 <HAL_TIM_PWM_Start+0x3e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	bf14      	ite	ne
 80058aa:	2301      	movne	r3, #1
 80058ac:	2300      	moveq	r3, #0
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	e015      	b.n	80058de <HAL_TIM_PWM_Start+0x6a>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d109      	bne.n	80058cc <HAL_TIM_PWM_Start+0x58>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	bf14      	ite	ne
 80058c4:	2301      	movne	r3, #1
 80058c6:	2300      	moveq	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	e008      	b.n	80058de <HAL_TIM_PWM_Start+0x6a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e07c      	b.n	80059e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <HAL_TIM_PWM_Start+0x82>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058f4:	e013      	b.n	800591e <HAL_TIM_PWM_Start+0xaa>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d104      	bne.n	8005906 <HAL_TIM_PWM_Start+0x92>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005904:	e00b      	b.n	800591e <HAL_TIM_PWM_Start+0xaa>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d104      	bne.n	8005916 <HAL_TIM_PWM_Start+0xa2>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005914:	e003      	b.n	800591e <HAL_TIM_PWM_Start+0xaa>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2201      	movs	r2, #1
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fe66 	bl	80065f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a2d      	ldr	r2, [pc, #180]	; (80059e8 <HAL_TIM_PWM_Start+0x174>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_TIM_PWM_Start+0xcc>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2c      	ldr	r2, [pc, #176]	; (80059ec <HAL_TIM_PWM_Start+0x178>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d101      	bne.n	8005944 <HAL_TIM_PWM_Start+0xd0>
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <HAL_TIM_PWM_Start+0xd2>
 8005944:	2300      	movs	r3, #0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005958:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a22      	ldr	r2, [pc, #136]	; (80059e8 <HAL_TIM_PWM_Start+0x174>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d022      	beq.n	80059aa <HAL_TIM_PWM_Start+0x136>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596c:	d01d      	beq.n	80059aa <HAL_TIM_PWM_Start+0x136>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <HAL_TIM_PWM_Start+0x17c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d018      	beq.n	80059aa <HAL_TIM_PWM_Start+0x136>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <HAL_TIM_PWM_Start+0x180>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d013      	beq.n	80059aa <HAL_TIM_PWM_Start+0x136>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_TIM_PWM_Start+0x184>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00e      	beq.n	80059aa <HAL_TIM_PWM_Start+0x136>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a16      	ldr	r2, [pc, #88]	; (80059ec <HAL_TIM_PWM_Start+0x178>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d009      	beq.n	80059aa <HAL_TIM_PWM_Start+0x136>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIM_PWM_Start+0x188>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <HAL_TIM_PWM_Start+0x136>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <HAL_TIM_PWM_Start+0x18c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d111      	bne.n	80059ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b06      	cmp	r3, #6
 80059ba:	d010      	beq.n	80059de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059cc:	e007      	b.n	80059de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0201 	orr.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40001800 	.word	0x40001800

08005a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d122      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d11b      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0202 	mvn.w	r2, #2
 8005a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fa58 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005a4c:	e005      	b.n	8005a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa4a 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fa5b 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d122      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d11b      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0204 	mvn.w	r2, #4
 8005a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fa2e 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005aa0:	e005      	b.n	8005aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa20 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fa31 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d122      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d11b      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0208 	mvn.w	r2, #8
 8005ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2204      	movs	r2, #4
 8005ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa04 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f9f6 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fa07 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b10      	cmp	r3, #16
 8005b14:	d122      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d11b      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0210 	mvn.w	r2, #16
 8005b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2208      	movs	r2, #8
 8005b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9da 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9cc 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f9dd 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d10e      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d107      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0201 	mvn.w	r2, #1
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f9a6 	bl	8005ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b80      	cmp	r3, #128	; 0x80
 8005b94:	d10e      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba0:	2b80      	cmp	r3, #128	; 0x80
 8005ba2:	d107      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fdce 	bl	8006750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b40      	cmp	r3, #64	; 0x40
 8005bc0:	d10e      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bcc:	2b40      	cmp	r3, #64	; 0x40
 8005bce:	d107      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9a2 	bl	8005f24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d10e      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d107      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0220 	mvn.w	r2, #32
 8005c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fd98 	bl	800673c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e048      	b.n	8005cc4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b0c      	cmp	r3, #12
 8005c3e:	d839      	bhi.n	8005cb4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005c40:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c7d 	.word	0x08005c7d
 8005c4c:	08005cb5 	.word	0x08005cb5
 8005c50:	08005cb5 	.word	0x08005cb5
 8005c54:	08005cb5 	.word	0x08005cb5
 8005c58:	08005c8b 	.word	0x08005c8b
 8005c5c:	08005cb5 	.word	0x08005cb5
 8005c60:	08005cb5 	.word	0x08005cb5
 8005c64:	08005cb5 	.word	0x08005cb5
 8005c68:	08005c99 	.word	0x08005c99
 8005c6c:	08005cb5 	.word	0x08005cb5
 8005c70:	08005cb5 	.word	0x08005cb5
 8005c74:	08005cb5 	.word	0x08005cb5
 8005c78:	08005ca7 	.word	0x08005ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f9f8 	bl	8006078 <TIM_OC1_SetConfig>
      break;
 8005c88:	e017      	b.n	8005cba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fa61 	bl	8006158 <TIM_OC2_SetConfig>
      break;
 8005c96:	e010      	b.n	8005cba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fad0 	bl	8006244 <TIM_OC3_SetConfig>
      break;
 8005ca4:	e009      	b.n	8005cba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fb3d 	bl	800632c <TIM_OC4_SetConfig>
      break;
 8005cb2:	e002      	b.n	8005cba <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e0ae      	b.n	8005e48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b0c      	cmp	r3, #12
 8005cf6:	f200 809f 	bhi.w	8005e38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d35 	.word	0x08005d35
 8005d04:	08005e39 	.word	0x08005e39
 8005d08:	08005e39 	.word	0x08005e39
 8005d0c:	08005e39 	.word	0x08005e39
 8005d10:	08005d75 	.word	0x08005d75
 8005d14:	08005e39 	.word	0x08005e39
 8005d18:	08005e39 	.word	0x08005e39
 8005d1c:	08005e39 	.word	0x08005e39
 8005d20:	08005db7 	.word	0x08005db7
 8005d24:	08005e39 	.word	0x08005e39
 8005d28:	08005e39 	.word	0x08005e39
 8005d2c:	08005e39 	.word	0x08005e39
 8005d30:	08005df7 	.word	0x08005df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 f99c 	bl	8006078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699a      	ldr	r2, [r3, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0208 	orr.w	r2, r2, #8
 8005d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0204 	bic.w	r2, r2, #4
 8005d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6999      	ldr	r1, [r3, #24]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	619a      	str	r2, [r3, #24]
      break;
 8005d72:	e064      	b.n	8005e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f9ec 	bl	8006158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6999      	ldr	r1, [r3, #24]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	021a      	lsls	r2, r3, #8
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	619a      	str	r2, [r3, #24]
      break;
 8005db4:	e043      	b.n	8005e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fa41 	bl	8006244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0208 	orr.w	r2, r2, #8
 8005dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0204 	bic.w	r2, r2, #4
 8005de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69d9      	ldr	r1, [r3, #28]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	61da      	str	r2, [r3, #28]
      break;
 8005df4:	e023      	b.n	8005e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fa95 	bl	800632c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69d9      	ldr	r1, [r3, #28]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	021a      	lsls	r2, r3, #8
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	61da      	str	r2, [r3, #28]
      break;
 8005e36:	e002      	b.n	8005e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e031      	b.n	8005ecc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 faac 	bl	80063d8 <TIM_SlaveTimer_SetConfig>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e018      	b.n	8005ecc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005eb8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a40      	ldr	r2, [pc, #256]	; (800604c <TIM_Base_SetConfig+0x114>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d013      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f56:	d00f      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a3d      	ldr	r2, [pc, #244]	; (8006050 <TIM_Base_SetConfig+0x118>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00b      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a3c      	ldr	r2, [pc, #240]	; (8006054 <TIM_Base_SetConfig+0x11c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d007      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3b      	ldr	r2, [pc, #236]	; (8006058 <TIM_Base_SetConfig+0x120>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3a      	ldr	r2, [pc, #232]	; (800605c <TIM_Base_SetConfig+0x124>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d108      	bne.n	8005f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a2f      	ldr	r2, [pc, #188]	; (800604c <TIM_Base_SetConfig+0x114>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d02b      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f98:	d027      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2c      	ldr	r2, [pc, #176]	; (8006050 <TIM_Base_SetConfig+0x118>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d023      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2b      	ldr	r2, [pc, #172]	; (8006054 <TIM_Base_SetConfig+0x11c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01f      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2a      	ldr	r2, [pc, #168]	; (8006058 <TIM_Base_SetConfig+0x120>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01b      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a29      	ldr	r2, [pc, #164]	; (800605c <TIM_Base_SetConfig+0x124>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d017      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a28      	ldr	r2, [pc, #160]	; (8006060 <TIM_Base_SetConfig+0x128>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d013      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a27      	ldr	r2, [pc, #156]	; (8006064 <TIM_Base_SetConfig+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00f      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a26      	ldr	r2, [pc, #152]	; (8006068 <TIM_Base_SetConfig+0x130>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00b      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a25      	ldr	r2, [pc, #148]	; (800606c <TIM_Base_SetConfig+0x134>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a24      	ldr	r2, [pc, #144]	; (8006070 <TIM_Base_SetConfig+0x138>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a23      	ldr	r2, [pc, #140]	; (8006074 <TIM_Base_SetConfig+0x13c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d108      	bne.n	8005ffc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a0a      	ldr	r2, [pc, #40]	; (800604c <TIM_Base_SetConfig+0x114>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a0c      	ldr	r2, [pc, #48]	; (800605c <TIM_Base_SetConfig+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d103      	bne.n	8006038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	615a      	str	r2, [r3, #20]
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40010000 	.word	0x40010000
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40010400 	.word	0x40010400
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800
 800606c:	40001800 	.word	0x40001800
 8006070:	40001c00 	.word	0x40001c00
 8006074:	40002000 	.word	0x40002000

08006078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0303 	bic.w	r3, r3, #3
 80060ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f023 0302 	bic.w	r3, r3, #2
 80060c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a20      	ldr	r2, [pc, #128]	; (8006150 <TIM_OC1_SetConfig+0xd8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_OC1_SetConfig+0x64>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <TIM_OC1_SetConfig+0xdc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d10c      	bne.n	80060f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0308 	bic.w	r3, r3, #8
 80060e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 0304 	bic.w	r3, r3, #4
 80060f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a15      	ldr	r2, [pc, #84]	; (8006150 <TIM_OC1_SetConfig+0xd8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d003      	beq.n	8006106 <TIM_OC1_SetConfig+0x8e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a14      	ldr	r2, [pc, #80]	; (8006154 <TIM_OC1_SetConfig+0xdc>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d111      	bne.n	800612a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800610c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	621a      	str	r2, [r3, #32]
}
 8006144:	bf00      	nop
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	40010000 	.word	0x40010000
 8006154:	40010400 	.word	0x40010400

08006158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f023 0210 	bic.w	r2, r3, #16
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f023 0320 	bic.w	r3, r3, #32
 80061a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a22      	ldr	r2, [pc, #136]	; (800623c <TIM_OC2_SetConfig+0xe4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_OC2_SetConfig+0x68>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a21      	ldr	r2, [pc, #132]	; (8006240 <TIM_OC2_SetConfig+0xe8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d10d      	bne.n	80061dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a17      	ldr	r2, [pc, #92]	; (800623c <TIM_OC2_SetConfig+0xe4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_OC2_SetConfig+0x94>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a16      	ldr	r2, [pc, #88]	; (8006240 <TIM_OC2_SetConfig+0xe8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d113      	bne.n	8006214 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4313      	orrs	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40010000 	.word	0x40010000
 8006240:	40010400 	.word	0x40010400

08006244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800628c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a21      	ldr	r2, [pc, #132]	; (8006324 <TIM_OC3_SetConfig+0xe0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_OC3_SetConfig+0x66>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a20      	ldr	r2, [pc, #128]	; (8006328 <TIM_OC3_SetConfig+0xe4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d10d      	bne.n	80062c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a16      	ldr	r2, [pc, #88]	; (8006324 <TIM_OC3_SetConfig+0xe0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d003      	beq.n	80062d6 <TIM_OC3_SetConfig+0x92>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a15      	ldr	r2, [pc, #84]	; (8006328 <TIM_OC3_SetConfig+0xe4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d113      	bne.n	80062fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	621a      	str	r2, [r3, #32]
}
 8006318:	bf00      	nop
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400

0800632c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	021b      	lsls	r3, r3, #8
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	031b      	lsls	r3, r3, #12
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <TIM_OC4_SetConfig+0xa4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_OC4_SetConfig+0x68>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a11      	ldr	r2, [pc, #68]	; (80063d4 <TIM_OC4_SetConfig+0xa8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d109      	bne.n	80063a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800639a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	019b      	lsls	r3, r3, #6
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40010400 	.word	0x40010400

080063d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f023 0307 	bic.w	r3, r3, #7
 8006406:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b70      	cmp	r3, #112	; 0x70
 8006420:	d01a      	beq.n	8006458 <TIM_SlaveTimer_SetConfig+0x80>
 8006422:	2b70      	cmp	r3, #112	; 0x70
 8006424:	d860      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 8006426:	2b60      	cmp	r3, #96	; 0x60
 8006428:	d054      	beq.n	80064d4 <TIM_SlaveTimer_SetConfig+0xfc>
 800642a:	2b60      	cmp	r3, #96	; 0x60
 800642c:	d85c      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 800642e:	2b50      	cmp	r3, #80	; 0x50
 8006430:	d046      	beq.n	80064c0 <TIM_SlaveTimer_SetConfig+0xe8>
 8006432:	2b50      	cmp	r3, #80	; 0x50
 8006434:	d858      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d019      	beq.n	800646e <TIM_SlaveTimer_SetConfig+0x96>
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d854      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 800643e:	2b30      	cmp	r3, #48	; 0x30
 8006440:	d055      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x116>
 8006442:	2b30      	cmp	r3, #48	; 0x30
 8006444:	d850      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 8006446:	2b20      	cmp	r3, #32
 8006448:	d051      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x116>
 800644a:	2b20      	cmp	r3, #32
 800644c:	d84c      	bhi.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d04d      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x116>
 8006452:	2b10      	cmp	r3, #16
 8006454:	d04b      	beq.n	80064ee <TIM_SlaveTimer_SetConfig+0x116>
 8006456:	e047      	b.n	80064e8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68d9      	ldr	r1, [r3, #12]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f000 f8a6 	bl	80065b8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800646c:	e040      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b05      	cmp	r3, #5
 8006474:	d101      	bne.n	800647a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e03b      	b.n	80064f2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a1a      	ldr	r2, [r3, #32]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	621a      	str	r2, [r3, #32]
      break;
 80064be:	e017      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	6899      	ldr	r1, [r3, #8]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	461a      	mov	r2, r3
 80064ce:	f000 f814 	bl	80064fa <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80064d2:	e00d      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	6899      	ldr	r1, [r3, #8]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	461a      	mov	r2, r3
 80064e2:	f000 f839 	bl	8006558 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80064e6:	e003      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
      break;
 80064ec:	e000      	b.n	80064f0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80064ee:	bf00      	nop
  }

  return status;
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b087      	sub	sp, #28
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	f023 0201 	bic.w	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 030a 	bic.w	r3, r3, #10
 8006536:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	621a      	str	r2, [r3, #32]
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f023 0210 	bic.w	r2, r3, #16
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006582:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	031b      	lsls	r3, r3, #12
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006594:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	621a      	str	r2, [r3, #32]
}
 80065ac:	bf00      	nop
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	021a      	lsls	r2, r3, #8
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	431a      	orrs	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	609a      	str	r2, [r3, #8]
}
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	2201      	movs	r2, #1
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1a      	ldr	r2, [r3, #32]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	43db      	mvns	r3, r3
 800661a:	401a      	ands	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1a      	ldr	r2, [r3, #32]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 031f 	and.w	r3, r3, #31
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	fa01 f303 	lsl.w	r3, r1, r3
 8006630:	431a      	orrs	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
	...

08006644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006658:	2302      	movs	r3, #2
 800665a:	e05a      	b.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a21      	ldr	r2, [pc, #132]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d022      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a8:	d01d      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1b      	ldr	r2, [pc, #108]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1a      	ldr	r2, [pc, #104]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a17      	ldr	r2, [pc, #92]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a15      	ldr	r2, [pc, #84]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d10c      	bne.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40010000 	.word	0x40010000
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800
 800672c:	40000c00 	.word	0x40000c00
 8006730:	40010400 	.word	0x40010400
 8006734:	40014000 	.word	0x40014000
 8006738:	40001800 	.word	0x40001800

0800673c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <__errno>:
 8006764:	4b01      	ldr	r3, [pc, #4]	; (800676c <__errno+0x8>)
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000010 	.word	0x20000010

08006770 <__libc_init_array>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	4d0d      	ldr	r5, [pc, #52]	; (80067a8 <__libc_init_array+0x38>)
 8006774:	4c0d      	ldr	r4, [pc, #52]	; (80067ac <__libc_init_array+0x3c>)
 8006776:	1b64      	subs	r4, r4, r5
 8006778:	10a4      	asrs	r4, r4, #2
 800677a:	2600      	movs	r6, #0
 800677c:	42a6      	cmp	r6, r4
 800677e:	d109      	bne.n	8006794 <__libc_init_array+0x24>
 8006780:	4d0b      	ldr	r5, [pc, #44]	; (80067b0 <__libc_init_array+0x40>)
 8006782:	4c0c      	ldr	r4, [pc, #48]	; (80067b4 <__libc_init_array+0x44>)
 8006784:	f000 f908 	bl	8006998 <_init>
 8006788:	1b64      	subs	r4, r4, r5
 800678a:	10a4      	asrs	r4, r4, #2
 800678c:	2600      	movs	r6, #0
 800678e:	42a6      	cmp	r6, r4
 8006790:	d105      	bne.n	800679e <__libc_init_array+0x2e>
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	f855 3b04 	ldr.w	r3, [r5], #4
 8006798:	4798      	blx	r3
 800679a:	3601      	adds	r6, #1
 800679c:	e7ee      	b.n	800677c <__libc_init_array+0xc>
 800679e:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a2:	4798      	blx	r3
 80067a4:	3601      	adds	r6, #1
 80067a6:	e7f2      	b.n	800678e <__libc_init_array+0x1e>
 80067a8:	080069d0 	.word	0x080069d0
 80067ac:	080069d0 	.word	0x080069d0
 80067b0:	080069d0 	.word	0x080069d0
 80067b4:	080069d4 	.word	0x080069d4

080067b8 <memset>:
 80067b8:	4402      	add	r2, r0
 80067ba:	4603      	mov	r3, r0
 80067bc:	4293      	cmp	r3, r2
 80067be:	d100      	bne.n	80067c2 <memset+0xa>
 80067c0:	4770      	bx	lr
 80067c2:	f803 1b01 	strb.w	r1, [r3], #1
 80067c6:	e7f9      	b.n	80067bc <memset+0x4>

080067c8 <sqrt>:
 80067c8:	b538      	push	{r3, r4, r5, lr}
 80067ca:	ed2d 8b02 	vpush	{d8}
 80067ce:	ec55 4b10 	vmov	r4, r5, d0
 80067d2:	f000 f82d 	bl	8006830 <__ieee754_sqrt>
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <sqrt+0x64>)
 80067d8:	eeb0 8a40 	vmov.f32	s16, s0
 80067dc:	eef0 8a60 	vmov.f32	s17, s1
 80067e0:	f993 3000 	ldrsb.w	r3, [r3]
 80067e4:	3301      	adds	r3, #1
 80067e6:	d019      	beq.n	800681c <sqrt+0x54>
 80067e8:	4622      	mov	r2, r4
 80067ea:	462b      	mov	r3, r5
 80067ec:	4620      	mov	r0, r4
 80067ee:	4629      	mov	r1, r5
 80067f0:	f7fa f960 	bl	8000ab4 <__aeabi_dcmpun>
 80067f4:	b990      	cbnz	r0, 800681c <sqrt+0x54>
 80067f6:	2200      	movs	r2, #0
 80067f8:	2300      	movs	r3, #0
 80067fa:	4620      	mov	r0, r4
 80067fc:	4629      	mov	r1, r5
 80067fe:	f7fa f931 	bl	8000a64 <__aeabi_dcmplt>
 8006802:	b158      	cbz	r0, 800681c <sqrt+0x54>
 8006804:	f7ff ffae 	bl	8006764 <__errno>
 8006808:	2321      	movs	r3, #33	; 0x21
 800680a:	6003      	str	r3, [r0, #0]
 800680c:	2200      	movs	r2, #0
 800680e:	2300      	movs	r3, #0
 8006810:	4610      	mov	r0, r2
 8006812:	4619      	mov	r1, r3
 8006814:	f7f9 ffde 	bl	80007d4 <__aeabi_ddiv>
 8006818:	ec41 0b18 	vmov	d8, r0, r1
 800681c:	eeb0 0a48 	vmov.f32	s0, s16
 8006820:	eef0 0a68 	vmov.f32	s1, s17
 8006824:	ecbd 8b02 	vpop	{d8}
 8006828:	bd38      	pop	{r3, r4, r5, pc}
 800682a:	bf00      	nop
 800682c:	20000074 	.word	0x20000074

08006830 <__ieee754_sqrt>:
 8006830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006834:	ec55 4b10 	vmov	r4, r5, d0
 8006838:	4e56      	ldr	r6, [pc, #344]	; (8006994 <__ieee754_sqrt+0x164>)
 800683a:	43ae      	bics	r6, r5
 800683c:	ee10 0a10 	vmov	r0, s0
 8006840:	ee10 3a10 	vmov	r3, s0
 8006844:	4629      	mov	r1, r5
 8006846:	462a      	mov	r2, r5
 8006848:	d110      	bne.n	800686c <__ieee754_sqrt+0x3c>
 800684a:	ee10 2a10 	vmov	r2, s0
 800684e:	462b      	mov	r3, r5
 8006850:	f7f9 fe96 	bl	8000580 <__aeabi_dmul>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4620      	mov	r0, r4
 800685a:	4629      	mov	r1, r5
 800685c:	f7f9 fcda 	bl	8000214 <__adddf3>
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
 8006864:	ec45 4b10 	vmov	d0, r4, r5
 8006868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800686c:	2d00      	cmp	r5, #0
 800686e:	dc10      	bgt.n	8006892 <__ieee754_sqrt+0x62>
 8006870:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006874:	4330      	orrs	r0, r6
 8006876:	d0f5      	beq.n	8006864 <__ieee754_sqrt+0x34>
 8006878:	b15d      	cbz	r5, 8006892 <__ieee754_sqrt+0x62>
 800687a:	ee10 2a10 	vmov	r2, s0
 800687e:	462b      	mov	r3, r5
 8006880:	ee10 0a10 	vmov	r0, s0
 8006884:	f7f9 fcc4 	bl	8000210 <__aeabi_dsub>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	f7f9 ffa2 	bl	80007d4 <__aeabi_ddiv>
 8006890:	e7e6      	b.n	8006860 <__ieee754_sqrt+0x30>
 8006892:	1509      	asrs	r1, r1, #20
 8006894:	d076      	beq.n	8006984 <__ieee754_sqrt+0x154>
 8006896:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800689a:	07ce      	lsls	r6, r1, #31
 800689c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80068a0:	bf5e      	ittt	pl
 80068a2:	0fda      	lsrpl	r2, r3, #31
 80068a4:	005b      	lslpl	r3, r3, #1
 80068a6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80068aa:	0fda      	lsrs	r2, r3, #31
 80068ac:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80068b0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80068b4:	2000      	movs	r0, #0
 80068b6:	106d      	asrs	r5, r5, #1
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	f04f 0e16 	mov.w	lr, #22
 80068be:	4684      	mov	ip, r0
 80068c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068c4:	eb0c 0401 	add.w	r4, ip, r1
 80068c8:	4294      	cmp	r4, r2
 80068ca:	bfde      	ittt	le
 80068cc:	1b12      	suble	r2, r2, r4
 80068ce:	eb04 0c01 	addle.w	ip, r4, r1
 80068d2:	1840      	addle	r0, r0, r1
 80068d4:	0052      	lsls	r2, r2, #1
 80068d6:	f1be 0e01 	subs.w	lr, lr, #1
 80068da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80068de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80068e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068e6:	d1ed      	bne.n	80068c4 <__ieee754_sqrt+0x94>
 80068e8:	4671      	mov	r1, lr
 80068ea:	2720      	movs	r7, #32
 80068ec:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80068f0:	4562      	cmp	r2, ip
 80068f2:	eb04 060e 	add.w	r6, r4, lr
 80068f6:	dc02      	bgt.n	80068fe <__ieee754_sqrt+0xce>
 80068f8:	d113      	bne.n	8006922 <__ieee754_sqrt+0xf2>
 80068fa:	429e      	cmp	r6, r3
 80068fc:	d811      	bhi.n	8006922 <__ieee754_sqrt+0xf2>
 80068fe:	2e00      	cmp	r6, #0
 8006900:	eb06 0e04 	add.w	lr, r6, r4
 8006904:	da43      	bge.n	800698e <__ieee754_sqrt+0x15e>
 8006906:	f1be 0f00 	cmp.w	lr, #0
 800690a:	db40      	blt.n	800698e <__ieee754_sqrt+0x15e>
 800690c:	f10c 0801 	add.w	r8, ip, #1
 8006910:	eba2 020c 	sub.w	r2, r2, ip
 8006914:	429e      	cmp	r6, r3
 8006916:	bf88      	it	hi
 8006918:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800691c:	1b9b      	subs	r3, r3, r6
 800691e:	4421      	add	r1, r4
 8006920:	46c4      	mov	ip, r8
 8006922:	0052      	lsls	r2, r2, #1
 8006924:	3f01      	subs	r7, #1
 8006926:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800692a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800692e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006932:	d1dd      	bne.n	80068f0 <__ieee754_sqrt+0xc0>
 8006934:	4313      	orrs	r3, r2
 8006936:	d006      	beq.n	8006946 <__ieee754_sqrt+0x116>
 8006938:	1c4c      	adds	r4, r1, #1
 800693a:	bf13      	iteet	ne
 800693c:	3101      	addne	r1, #1
 800693e:	3001      	addeq	r0, #1
 8006940:	4639      	moveq	r1, r7
 8006942:	f021 0101 	bicne.w	r1, r1, #1
 8006946:	1043      	asrs	r3, r0, #1
 8006948:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800694c:	0849      	lsrs	r1, r1, #1
 800694e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006952:	07c2      	lsls	r2, r0, #31
 8006954:	bf48      	it	mi
 8006956:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800695a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800695e:	460c      	mov	r4, r1
 8006960:	463d      	mov	r5, r7
 8006962:	e77f      	b.n	8006864 <__ieee754_sqrt+0x34>
 8006964:	0ada      	lsrs	r2, r3, #11
 8006966:	3815      	subs	r0, #21
 8006968:	055b      	lsls	r3, r3, #21
 800696a:	2a00      	cmp	r2, #0
 800696c:	d0fa      	beq.n	8006964 <__ieee754_sqrt+0x134>
 800696e:	02d7      	lsls	r7, r2, #11
 8006970:	d50a      	bpl.n	8006988 <__ieee754_sqrt+0x158>
 8006972:	f1c1 0420 	rsb	r4, r1, #32
 8006976:	fa23 f404 	lsr.w	r4, r3, r4
 800697a:	1e4d      	subs	r5, r1, #1
 800697c:	408b      	lsls	r3, r1
 800697e:	4322      	orrs	r2, r4
 8006980:	1b41      	subs	r1, r0, r5
 8006982:	e788      	b.n	8006896 <__ieee754_sqrt+0x66>
 8006984:	4608      	mov	r0, r1
 8006986:	e7f0      	b.n	800696a <__ieee754_sqrt+0x13a>
 8006988:	0052      	lsls	r2, r2, #1
 800698a:	3101      	adds	r1, #1
 800698c:	e7ef      	b.n	800696e <__ieee754_sqrt+0x13e>
 800698e:	46e0      	mov	r8, ip
 8006990:	e7be      	b.n	8006910 <__ieee754_sqrt+0xe0>
 8006992:	bf00      	nop
 8006994:	7ff00000 	.word	0x7ff00000

08006998 <_init>:
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	bf00      	nop
 800699c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699e:	bc08      	pop	{r3}
 80069a0:	469e      	mov	lr, r3
 80069a2:	4770      	bx	lr

080069a4 <_fini>:
 80069a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a6:	bf00      	nop
 80069a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069aa:	bc08      	pop	{r3}
 80069ac:	469e      	mov	lr, r3
 80069ae:	4770      	bx	lr
